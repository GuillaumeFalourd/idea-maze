diff --git a/chrome/browser/extensions/api/language_settings_private/language_settings_private_api.cc b/chrome/browser/extensions/api/language_settings_private/language_settings_private_api.cc
index 00869095b0..8db8f9758c 100644
--- a/chrome/browser/extensions/api/language_settings_private/language_settings_private_api.cc
+++ b/chrome/browser/extensions/api/language_settings_private/language_settings_private_api.cc
@@ -211,6 +211,10 @@ LanguageSettingsPrivateGetLanguageListFunction::

 ExtensionFunction::ResponseAction
 LanguageSettingsPrivateGetLanguageListFunction::Run() {
+#if 1
+  std::unique_ptr<base::ListValue> language_list(new base::ListValue);
+  return RespondNow(OneArgument(base::Value::FromUniquePtrValue(std::move(language_list))));
+#else
   // Collect the language codes from the supported accept-languages.
   const std::string app_locale = g_browser_process->GetApplicationLocale();
   const std::unique_ptr<translate::TranslatePrefs> translate_prefs =
@@ -294,6 +298,7 @@ LanguageSettingsPrivateGetLanguageListFunction::Run() {
 #endif  // BUILDFLAG(IS_WIN)

   return RespondNow(OneArgument(base::Value(std::move(language_list_))));
+#endif
 }

 #if BUILDFLAG(IS_WIN)
@@ -328,6 +333,7 @@ LanguageSettingsPrivateEnableLanguageFunction::Run() {
   const auto parameters =
       language_settings_private::EnableLanguage::Params::Create(args());
   EXTENSION_FUNCTION_VALIDATE(parameters.get());
+#if 0
   const std::string& language_code = parameters->language_code;

   std::unique_ptr<translate::TranslatePrefs> translate_prefs =
@@ -345,6 +351,7 @@ LanguageSettingsPrivateEnableLanguageFunction::Run() {

   translate_prefs->AddToLanguageList(language_code, /*force_blocked=*/false);

+#endif
   return RespondNow(NoArguments());
 }

@@ -359,6 +366,7 @@ LanguageSettingsPrivateDisableLanguageFunction::Run() {
   const auto parameters =
       language_settings_private::DisableLanguage::Params::Create(args());
   EXTENSION_FUNCTION_VALIDATE(parameters.get());
+#if 0
   const std::string& language_code = parameters->language_code;

   std::unique_ptr<translate::TranslatePrefs> translate_prefs =
@@ -379,6 +387,7 @@ LanguageSettingsPrivateDisableLanguageFunction::Run() {
     translate_prefs->ResetRecentTargetLanguage();
   }

+#endif
   return RespondNow(NoArguments());
 }

@@ -393,6 +402,7 @@ LanguageSettingsPrivateSetEnableTranslationForLanguageFunction::Run() {
   const auto parameters = language_settings_private::
       SetEnableTranslationForLanguage::Params::Create(args());
   EXTENSION_FUNCTION_VALIDATE(parameters.get());
+#if 0
   const std::string& language_code = parameters->language_code;
   // True if translation enabled, false if disabled.
   const bool enable = parameters->enable;
@@ -406,6 +416,7 @@ LanguageSettingsPrivateSetEnableTranslationForLanguageFunction::Run() {
     translate_prefs->BlockLanguage(language_code);
   }

+#endif
   return RespondNow(NoArguments());
 }

@@ -417,6 +428,7 @@ LanguageSettingsPrivateGetAlwaysTranslateLanguagesFunction::

 ExtensionFunction::ResponseAction
 LanguageSettingsPrivateGetAlwaysTranslateLanguagesFunction::Run() {
+#if 0
   const std::unique_ptr<translate::TranslatePrefs> translate_prefs =
       CreateTranslatePrefsForBrowserContext(browser_context());

@@ -431,6 +443,8 @@ LanguageSettingsPrivateGetAlwaysTranslateLanguagesFunction::Run() {

   return RespondNow(OneArgument(
       base::Value::FromUniquePtrValue(std::move(always_translate_languages_))));
+#endif
+  return RespondNow(NoArguments());
 }

 LanguageSettingsPrivateSetLanguageAlwaysTranslateStateFunction::
@@ -441,6 +455,7 @@ LanguageSettingsPrivateSetLanguageAlwaysTranslateStateFunction::

 ExtensionFunction::ResponseAction
 LanguageSettingsPrivateSetLanguageAlwaysTranslateStateFunction::Run() {
+#if 0
   const auto params = language_settings_private::
       SetLanguageAlwaysTranslateState::Params::Create(args());
   EXTENSION_FUNCTION_VALIDATE(params.get());
@@ -450,7 +465,7 @@ LanguageSettingsPrivateSetLanguageAlwaysTranslateStateFunction::Run() {

   translate_prefs->SetLanguageAlwaysTranslateState(params->language_code,
                                                    params->always_translate);
-
+#endif
   return RespondNow(NoArguments());
 }

@@ -462,6 +477,7 @@ LanguageSettingsPrivateGetNeverTranslateLanguagesFunction::

 ExtensionFunction::ResponseAction
 LanguageSettingsPrivateGetNeverTranslateLanguagesFunction::Run() {
+#if 0
   const std::unique_ptr<translate::TranslatePrefs> translate_prefs =
       CreateTranslatePrefsForBrowserContext(browser_context());

@@ -473,6 +489,8 @@ LanguageSettingsPrivateGetNeverTranslateLanguagesFunction::Run() {
     never_translate_languages.Append(std::move(entry));
   }
   return RespondNow(OneArgument(std::move(never_translate_languages)));
+#endif
+  return RespondNow(NoArguments());
 }

 LanguageSettingsPrivateMoveLanguageFunction::
@@ -483,6 +501,7 @@ LanguageSettingsPrivateMoveLanguageFunction::

 ExtensionFunction::ResponseAction
 LanguageSettingsPrivateMoveLanguageFunction::Run() {
+#if 0
   const auto parameters =
       language_settings_private::MoveLanguage::Params::Create(args());
   EXTENSION_FUNCTION_VALIDATE(parameters.get());
@@ -522,6 +541,7 @@ LanguageSettingsPrivateMoveLanguageFunction::Run() {
   translate_prefs->RearrangeLanguage(language_code, where, offset,
                                      supported_language_codes);

+#endif
   return RespondNow(NoArguments());
 }

@@ -655,12 +675,16 @@ LanguageSettingsPrivateGetTranslateTargetLanguageFunction::

 ExtensionFunction::ResponseAction
 LanguageSettingsPrivateGetTranslateTargetLanguageFunction::Run() {
+#if 0
   language::LanguageModel* language_model =
       LanguageModelManagerFactory::GetForBrowserContext(browser_context())
           ->GetPrimaryModel();
   return RespondNow(OneArgument(base::Value(TranslateService::GetTargetLanguage(
       Profile::FromBrowserContext(browser_context())->GetPrefs(),
       language_model))));
+#else
+  return RespondNow(NoArguments());
+#endif
 }

 LanguageSettingsPrivateSetTranslateTargetLanguageFunction::
@@ -671,6 +695,7 @@ LanguageSettingsPrivateSetTranslateTargetLanguageFunction::

 ExtensionFunction::ResponseAction
 LanguageSettingsPrivateSetTranslateTargetLanguageFunction::Run() {
+#if 0
   const auto parameters =
       language_settings_private::SetTranslateTargetLanguage::Params::Create(
           args());
@@ -686,7 +711,7 @@ LanguageSettingsPrivateSetTranslateTargetLanguageFunction::Run() {
     return RespondNow(NoArguments());
   }
   translate_prefs->SetRecentTargetLanguage(language_code);
-
+#endif
   return RespondNow(NoArguments());
 }

