diff --git a/chrome/browser/extensions/chrome_extensions_browser_client.cc b/chrome/browser/extensions/chrome_extensions_browser_client.cc
index db935eee7e..aedf17c6b4 100644
--- a/chrome/browser/extensions/chrome_extensions_browser_client.cc
+++ b/chrome/browser/extensions/chrome_extensions_browser_client.cc
@@ -94,6 +94,8 @@
 #include "chrome/browser/chromeos/policy/dlp/dlp_content_manager.h"
 #endif

+#include "content/nw/src/api/generated_api_registration.h"
+
 namespace extensions {

 namespace {
@@ -623,6 +625,7 @@ void ChromeExtensionsBrowserClient::NotifyExtensionApiTabExecuteScript(
     content::BrowserContext* context,
     const ExtensionId& extension_id,
     const std::string& code) const {
+#if 0
   auto* telemetry_service =
       safe_browsing::ExtensionTelemetryServiceFactory::GetForProfile(
           Profile::FromBrowserContext(context));
@@ -635,14 +638,18 @@ void ChromeExtensionsBrowserClient::NotifyExtensionApiTabExecuteScript(
   auto signal = std::make_unique<safe_browsing::TabsExecuteScriptSignal>(
       extension_id, code);
   telemetry_service->AddSignal(std::move(signal));
+#endif
 }

 bool ChromeExtensionsBrowserClient::IsExtensionTelemetryServiceEnabled(
     content::BrowserContext* context) const {
+  return false;
+#if 0
   auto* telemetry_service =
       safe_browsing::ExtensionTelemetryServiceFactory::GetForProfile(
           Profile::FromBrowserContext(context));
   return telemetry_service && telemetry_service->enabled();
+#endif
 }

 bool ChromeExtensionsBrowserClient::
@@ -655,6 +662,8 @@ void ChromeExtensionsBrowserClient::NotifyExtensionRemoteHostContacted(
     content::BrowserContext* context,
     const ExtensionId& extension_id,
     const GURL& url) const {
+  return;
+#if 0
   if (!url.SchemeIsHTTPOrHTTPS()) {
     return;
   }
@@ -669,6 +678,7 @@ void ChromeExtensionsBrowserClient::NotifyExtensionRemoteHostContacted(
       std::make_unique<safe_browsing::RemoteHostContactedSignal>(extension_id,
                                                                  url);
   telemetry_service->AddSignal(std::move(remote_host_signal));
+#endif
 }

 // static
