diff --git a/ui/views/widget/widget_delegate.h b/ui/views/widget/widget_delegate.h
index 431d19f254..9214d3fdc4 100644
--- a/ui/views/widget/widget_delegate.h
+++ b/ui/views/widget/widget_delegate.h
@@ -127,6 +127,7 @@ class VIEWS_EXPORT WidgetDelegate {

   // Called whenever the widget's position changes.
   virtual void OnWidgetMove();
+  virtual void OnWidgetResize();

   // Called with the display changes (color depth or resolution).
   virtual void OnDisplayChanged();
@@ -156,7 +157,7 @@ class VIEWS_EXPORT WidgetDelegate {
   virtual DialogDelegate* AsDialogDelegate();

   // Returns true if the window can be resized.
-  bool CanResize() const;
+  virtual bool CanResize() const;

   // Returns true if the window can be maximized.
   virtual bool CanMaximize() const;
@@ -166,6 +167,7 @@ class VIEWS_EXPORT WidgetDelegate {

   // Returns true if the window can be activated.
   virtual bool CanActivate() const;
+  virtual bool NWCanClose(bool user_force = false) const;

   // Returns the modal type that applies to the widget. Default is
   // ui::MODAL_TYPE_NONE (not modal).
@@ -185,6 +187,8 @@ class VIEWS_EXPORT WidgetDelegate {
   // Returns true if the window should show a close button in the title bar.
   virtual bool ShouldShowCloseButton() const;

+  virtual bool ShouldHandleOnSize() const;
+
   // Returns the app icon for the window. On Windows, this is the ICON_BIG used
   // in Alt-Tab list and Win7's taskbar.
   virtual ui::ImageModel GetWindowAppIcon();
@@ -199,6 +203,10 @@ class VIEWS_EXPORT WidgetDelegate {
   // was handled, false if it was not.
   virtual bool ExecuteWindowsCommand(int command_id);

+  virtual bool ExecuteAppCommand(int command_id);
+
+  virtual bool HandleSize(unsigned int param, const gfx::Size& size);
+
   // Returns the window's name identifier. Used to identify this window for
   // state restoration.
   virtual std::string GetWindowName() const;
