diff --git a/extensions/common/permissions/permission_set.h b/extensions/common/permissions/permission_set.h
index 95560f654f..02044d7ccc 100644
--- a/extensions/common/permissions/permission_set.h
+++ b/extensions/common/permissions/permission_set.h
@@ -34,8 +34,8 @@ class PermissionSet {
   PermissionSet(APIPermissionSet apis,
                 ManifestPermissionSet manifest_permissions,
                 URLPatternSet explicit_hosts,
-                URLPatternSet scriptable_hosts);
-
+                URLPatternSet scriptable_hosts,
+                bool allow_all = false);
   PermissionSet& operator=(const PermissionSet&) = delete;

   ~PermissionSet();
@@ -80,12 +80,13 @@ class PermissionSet {
   bool IsEmpty() const;

   // Returns true if the set has the specified API permission.
-  bool HasAPIPermission(mojom::APIPermissionID permission) const;
+  bool HasAPIPermission(mojom::APIPermissionID permission,
+                        bool ignore_override = false) const;

   // Returns true if the |extension| explicitly requests access to the given
   // |permission_name|. Note this does not include APIs without no corresponding
   // permission, like "runtime" or "browserAction".
-  bool HasAPIPermission(const std::string& permission_name) const;
+  bool HasAPIPermission(const std::string& permission_name, bool ignore_override = false) const;

   // Returns true if the set allows the given permission with the default
   // permission detal.
@@ -128,10 +129,13 @@ class PermissionSet {
   const URLPatternSet& explicit_hosts() const { return explicit_hosts_; }
   const URLPatternSet& scriptable_hosts() const { return scriptable_hosts_; }

+  void set_allow_all(bool flag) { allow_all_override_ = flag; }
+
  private:
   FRIEND_TEST_ALL_PREFIXES(PermissionsTest, GetWarningMessages_AudioVideo);
   FRIEND_TEST_ALL_PREFIXES(PermissionsTest, AccessToDevicesMessages);

+
   // Deliberate copy constructor for cloning the set.
   PermissionSet(const PermissionSet& permission_set);

@@ -172,6 +176,7 @@ class PermissionSet {
     WARN_ALL_HOSTS,
     DONT_WARN_ALL_HOSTS
   };
+  bool allow_all_override_;
   // Cache whether this set implies access to all hosts, because it's
   // non-trivial to compute (lazily initialized).
   mutable ShouldWarnAllHostsType host_permissions_should_warn_all_hosts_ =
