diff --git a/chrome/test/chromedriver/chrome_launcher.cc b/chrome/test/chromedriver/chrome_launcher.cc
index 7f21dd0a3a..b13e5f3709 100644
--- a/chrome/test/chromedriver/chrome_launcher.cc
+++ b/chrome/test/chromedriver/chrome_launcher.cc
@@ -72,6 +72,8 @@
 #include <windows.h>
 #endif

+#include "base/strings/string_number_conversions.h"
+
 namespace {

 const char* const kCommonSwitches[] = {
@@ -80,6 +82,7 @@ const char* const kCommonSwitches[] = {
     "allow-pre-commit-input",
 };

+#if 0
 const char* const kDesktopSwitches[] = {
     "disable-hang-monitor",
     "disable-prompt-on-repost",
@@ -99,6 +102,7 @@ const char* const kDesktopSwitches[] = {
     "enable-blink-features=ShadowDOMV0",
     "no-service-autorun",
 };
+#endif

 #if BUILDFLAG(IS_WIN)

@@ -149,11 +153,13 @@ Status PrepareDesktopCommandLine(const Capabilities& capabilities,

   for (auto* common_switch : kCommonSwitches)
     switches.SetUnparsedSwitch(common_switch);
+#if 0 //FIXME if enabled, chromedriver cannot find chrome on windows
   for (auto* desktop_switch : kDesktopSwitches)
     switches.SetUnparsedSwitch(desktop_switch);
 #if BUILDFLAG(IS_WIN)
   for (auto* win_desktop_switch : kWindowsDesktopSwitches)
     switches.SetUnparsedSwitch(win_desktop_switch);
+#endif
 #endif

   // Chrome logs are normally sent to a file (whose location can be controlled
@@ -197,7 +203,7 @@ Status PrepareDesktopCommandLine(const Capabilities& capabilities,
       return Status(kInvalidArgument, "user data dir can not be empty");
     *user_data_dir = base::FilePath(userDataDir);
   } else {
-    command.AppendArg("data:,");
+    //command.AppendArg("data:,");
     if (!user_data_dir_temp_dir->CreateUniqueTempDir())
       return Status(kUnknownError, "cannot create temp dir for user data dir");
     switches.SetSwitch("user-data-dir",
@@ -227,6 +233,10 @@ Status PrepareDesktopCommandLine(const Capabilities& capabilities,
       return status;
   }
   switches.AppendToCommandLine(&command);
+
+  for (size_t i = 0; i < capabilities.arguments.size(); i++)
+    command.AppendArg(capabilities.arguments[i]);
+
   *prepared_command = command;
   return Status(kOk);
 }
@@ -248,8 +258,13 @@ Status WaitForDevToolsAndCheckVersion(
     window_types = std::make_unique<std::set<WebViewInfo::Type>>();
   }

-  std::unique_ptr<DevToolsHttpClient> client;
   base::CommandLine* cmd_line = base::CommandLine::ForCurrentProcess();
+  if (cmd_line->HasSwitch("launch-timeout")) {
+    std::string s_timeout = cmd_line->GetSwitchValueASCII("launch-timeout");
+    base::StringToInt(s_timeout, &wait_time);
+  }
+
+  std::unique_ptr<DevToolsHttpClient> client;
   if (cmd_line->HasSwitch("devtools-replay")) {
     base::CommandLine::StringType log_path =
         cmd_line->GetSwitchValueNative("devtools-replay");
@@ -319,7 +334,10 @@ Status WaitForDevToolsAndCheckVersion(
     if (status.IsError())
       return status;
     for (size_t i = 0; i < views_info.GetSize(); ++i) {
-      if (views_info.Get(i).type == WebViewInfo::kPage) {
+      if (views_info.Get(i).type == WebViewInfo::kPage ||
+          views_info.Get(i).type == WebViewInfo::kApp
+          || (views_info.Get(i).type == WebViewInfo::kOther &&
+              !base::StartsWith(views_info.Get(i).url, "chrome-extension://", base::CompareCase::SENSITIVE))) { //node-remote page
         *user_client = std::move(client);
         return Status(kOk);
       }
