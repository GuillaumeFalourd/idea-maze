diff --git a/extensions/browser/verified_contents.cc b/extensions/browser/verified_contents.cc
index b6e675e9ac..ea2b77693f 100644
--- a/extensions/browser/verified_contents.cc
+++ b/extensions/browser/verified_contents.cc
@@ -44,6 +44,7 @@ const char kSignedContentKey[] = "signed_content";
 const char kTreeHashPerFile[] = "treehash per file";
 const char kTreeHash[] = "treehash";
 const char kWebstoreKId[] = "webstore";
+const char kNWJSKId[] = "nwjs";

 // Helper function to iterate over a list of dictionaries, returning the
 // dictionary that has |key| -> |value| in it, if any, or null.
@@ -116,7 +117,21 @@ std::unique_ptr<VerifiedContents> VerifiedContents::Create(
       uma_recorder;
   // Note: VerifiedContents constructor is private.
   auto verified_contents = base::WrapUnique(new VerifiedContents(public_key));
-  std::string payload;
+  std::string payload, manifest;
+#if 0 //NWJS: fixme
+  std::string manifest_contents;
+  base::FilePath manifest_path = path.DirName().AppendASCII("package.json");
+  if (!base::ReadFileToString(manifest_path, &manifest_contents))
+    return nullptr;
+#endif
+  if (!verified_contents->GetPayload(contents, &manifest, "manifest"))
+    return nullptr;
+#if 0
+  if (manifest != manifest_contents) {
+    LOG(FATAL) << "manifest mismatch: " << manifest;
+    return nullptr;
+  }
+#endif
   if (!verified_contents->GetPayload(contents, &payload))
     return nullptr;

@@ -252,7 +267,8 @@ bool VerifiedContents::TreeHashRootEquals(const base::FilePath& relative_path,
 // the extension's key too (eg for non-webstore hosted extensions such as
 // enterprise installs).
 bool VerifiedContents::GetPayload(base::StringPiece contents,
-                                  std::string* payload) {
+                                  std::string* payload,
+                                  const char* manifest) {
   absl::optional<base::Value> top_list = base::JSONReader::Read(contents);
   if (!top_list || !top_list->is_list())
     return false;
@@ -283,6 +299,9 @@ bool VerifiedContents::GetPayload(base::StringPiece contents,

   const base::Value* signature_dict =
       FindDictionaryWithValue(*signatures, kHeaderKidKey, kWebstoreKId);
+  if (!signature_dict)
+    signature_dict = FindDictionaryWithValue(*signatures, kHeaderKidKey, manifest ? "manifest" : kNWJSKId);
+
   if (!signature_dict)
     return false;

@@ -298,7 +317,7 @@ bool VerifiedContents::GetPayload(base::StringPiece contents,
     return false;

   const std::string* encoded_payload =
-      signed_content->FindStringKey(kPayloadKey);
+    signed_content->FindStringKey(manifest ? "manifest" : kPayloadKey);
   if (!encoded_payload)
     return false;

