diff --git a/extensions/browser/event_listener_map.cc b/extensions/browser/event_listener_map.cc
index c9f0c34740..668af483db 100644
--- a/extensions/browser/event_listener_map.cc
+++ b/extensions/browser/event_listener_map.cc
@@ -4,6 +4,7 @@

 #include "extensions/browser/event_listener_map.h"

+#include "chrome/common/extensions/api/windows.h"
 #include <stddef.h>

 #include <utility>
@@ -195,16 +196,28 @@ bool EventListenerMap::HasListenerForEvent(

 bool EventListenerMap::HasListenerForExtension(
     const std::string& extension_id,
-    const std::string& event_name) const {
+    const std::string& event_name, int instance_id, std::string* out_extension_id) const {
   auto it = listeners_.find(event_name);
   if (it == listeners_.end())
     return false;

+  EventListener* ret = nullptr;
   for (const auto& listener_to_search : it->second) {
-    if (listener_to_search->extension_id() == extension_id)
-      return true;
+    if (listener_to_search->extension_id() == extension_id ||
+        listener_to_search->extension_id().empty()) {
+      int id = -1;
+      if (instance_id < 0)
+        ret = listener_to_search.get();
+      if (listener_to_search->filter() &&
+          listener_to_search->filter()->GetInteger("instanceId", &id) && id == instance_id)
+        ret = listener_to_search.get();
+    }
   }
-  return false;
+  if (!ret)
+    return false;
+  if (out_extension_id)
+    *out_extension_id = ret->extension_id();
+  return true;
 }

 bool EventListenerMap::HasListener(const EventListener* listener) const {
@@ -286,6 +299,8 @@ void EventListenerMap::LoadFilteredLazyListeners(
     bool is_for_service_worker,
     const DictionaryValue& filtered) {
   for (DictionaryValue::Iterator it(filtered); !it.IsAtEnd(); it.Advance()) {
+    if (it.key() == extensions::api::windows::OnRemoving::kEventName)
+      continue; //NWJS#7326
     // We skip entries if they are malformed.
     if (!it.value().is_list())
       continue;
