diff --git a/extensions/browser/content_verify_job.h b/extensions/browser/content_verify_job.h
index ecebdfbf54..0884b6650b 100644
--- a/extensions/browser/content_verify_job.h
+++ b/extensions/browser/content_verify_job.h
@@ -9,6 +9,7 @@

 #include <memory>
 #include <string>
+#include "base/files/file.h"

 #include "base/callback.h"
 #include "base/files/file_path.h"
@@ -59,7 +60,9 @@ class ContentVerifyJob : public base::RefCountedThreadSafe<ContentVerifyJob> {

     FAILURE_REASON_MAX
   };
-  using FailureCallback = base::OnceCallback<void(FailureReason)>;
+  using FailureCallback = base::OnceCallback<void(FailureReason, scoped_refptr<ContentVerifyJob>)>;
+  using ReadyCallback = base::OnceCallback<void(scoped_refptr<ContentVerifyJob>)>;
+  using SuccessCallback = base::OnceCallback<void(void)>;

   // The |failure_callback| will be called at most once if there was a failure.
   ContentVerifyJob(const ExtensionId& extension_id,
@@ -71,6 +74,11 @@ class ContentVerifyJob : public base::RefCountedThreadSafe<ContentVerifyJob> {
   ContentVerifyJob(const ContentVerifyJob&) = delete;
   ContentVerifyJob& operator=(const ContentVerifyJob&) = delete;

+  ContentVerifyJob(ContentHashReader* hash_reader,
+                   const ContentVerifierKey& content_verifier_key,
+                   FailureCallback failure_callback,
+                   ReadyCallback ready_callback);
+
   // This begins the process of getting expected hashes, so it should be called
   // as early as possible.
   void Start(ContentVerifier* verifier);
@@ -87,6 +95,9 @@ class ContentVerifyJob : public base::RefCountedThreadSafe<ContentVerifyJob> {
   // is not so appropriate.
   void Done();

+  void SetSuccessCallback(SuccessCallback& success_callback) { success_callback_ = std::move(success_callback); }
+  const SuccessCallback& success_callback() { return success_callback_; }
+
   class TestObserver : public base::RefCountedThreadSafe<TestObserver> {
    public:
     virtual void JobStarted(const ExtensionId& extension_id,
@@ -170,12 +181,19 @@ class ContentVerifyJob : public base::RefCountedThreadSafe<ContentVerifyJob> {

   // Called once if verification fails.
   FailureCallback failure_callback_;
+  ReadyCallback ready_callback_;
+  SuccessCallback success_callback_;

   // Set to true if we detected a mismatch and called the failure callback.
   bool failed_;

   // Used to synchronize all public methods.
   base::Lock lock_;
+
+ public:
+  int len_;
+  char* buf_;
+  base::File file_;
 };

 }  // namespace extensions
