diff --git a/third_party/blink/renderer/core/workers/worker_thread.cc b/third_party/blink/renderer/core/workers/worker_thread.cc
index 20d674166c..40526faad3 100644
--- a/third_party/blink/renderer/core/workers/worker_thread.cc
+++ b/third_party/blink/renderer/core/workers/worker_thread.cc
@@ -71,6 +71,17 @@
 #include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"
 #include "third_party/blink/renderer/platform/wtf/threading.h"

+
+#include "third_party/node-nw/src/node_webkit.h"
+
+#if defined(COMPONENT_BUILD) && defined(WIN32)
+#define NW_HOOK_MAP(type, sym, fn) BASE_EXPORT type fn;
+#else
+#define NW_HOOK_MAP(type, sym, fn) extern type fn;
+#endif
+#include "content/nw/src/common/node_hooks.h"
+#undef NW_HOOK_MAP
+
 namespace blink {

 using ExitCode = WorkerThread::ExitCode;
@@ -597,6 +608,10 @@ void WorkerThread::InitializeOnWorkerThread(
     const absl::optional<WorkerBackingThreadStartupData>& thread_startup_data,
     std::unique_ptr<WorkerDevToolsParams> devtools_params) {
   DCHECK(IsCurrentThread());
+
+  bool isNodeJS = global_scope_creation_params->nodejs_;
+  std::string main_script = global_scope_creation_params->main_script_;
+
   worker_reporting_proxy_.WillInitializeWorkerContext();
   {
     TRACE_EVENT0("blink.worker", "WorkerThread::InitializeWorkerContext");
@@ -636,7 +651,7 @@ void WorkerThread::InitializeOnWorkerThread(
     GlobalScope()->ScriptController()->Initialize(url_for_debugger);
     v8::HandleScope handle_scope(GetIsolate());
     Platform::Current()->WorkerContextCreated(
-        GlobalScope()->ScriptController()->GetContext());
+          GlobalScope()->ScriptController()->GetContext(), isNodeJS, main_script);

     inspector_task_runner_->InitIsolate(GetIsolate());
     SetThreadState(ThreadState::kRunning);
@@ -746,6 +761,7 @@ void WorkerThread::PrepareForShutdownOnWorkerThread() {

   if (WorkerThreadDebugger* debugger = WorkerThreadDebugger::From(GetIsolate()))
     debugger->WorkerThreadDestroyed(this);
+  ::g_stop_nw_instance_fn();

   GetWorkerReportingProxy().WillDestroyWorkerGlobalScope();

