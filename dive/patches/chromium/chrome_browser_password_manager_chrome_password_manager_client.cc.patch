diff --git a/chrome/browser/password_manager/chrome_password_manager_client.cc b/chrome/browser/password_manager/chrome_password_manager_client.cc
index bfff55776f..2a7a554d44 100644
--- a/chrome/browser/password_manager/chrome_password_manager_client.cc
+++ b/chrome/browser/password_manager/chrome_password_manager_client.cc
@@ -116,13 +116,17 @@
 #include "ui/base/clipboard/clipboard.h"
 #include "ui/base/data_transfer_policy/data_transfer_endpoint.h"
 #include "url/url_constants.h"
+#include "ui/base/clipboard/clipboard.h"

 #if BUILDFLAG(SAFE_BROWSING_AVAILABLE)
 #include "chrome/browser/safe_browsing/advanced_protection_status_manager.h"
 #include "chrome/browser/safe_browsing/advanced_protection_status_manager_factory.h"
-#include "third_party/blink/public/mojom/clipboard/clipboard.mojom.h"
 #endif

+#include "third_party/blink/public/mojom/clipboard/clipboard.mojom.h"
+#include "ui/base/clipboard/clipboard.h"
+#include "ui/base/data_transfer_policy/data_transfer_endpoint.h"
+
 #if BUILDFLAG(IS_ANDROID)
 #include "chrome/browser/android/tab_android.h"
 #include "chrome/browser/autofill/manual_filling_controller.h"
@@ -875,6 +879,7 @@ void ChromePasswordManagerClient::AnnotateNavigationEntry(
 }

 autofill::LanguageCode ChromePasswordManagerClient::GetPageLanguage() const {
+#if 0
   // TODO(crbug.com/912597): iOS vs other platforms extracts language from
   // the top level frame vs whatever frame directly holds the form.
   auto* translate_manager =
@@ -882,13 +887,17 @@ autofill::LanguageCode ChromePasswordManagerClient::GetPageLanguage() const {
   if (translate_manager)
     return autofill::LanguageCode(
         translate_manager->GetLanguageState()->source_language());
+#endif
   return autofill::LanguageCode();
 }

 safe_browsing::PasswordProtectionService*
 ChromePasswordManagerClient::GetPasswordProtectionService() const {
+  return nullptr;
+#if 0
   return safe_browsing::ChromePasswordProtectionService::
       GetPasswordProtectionService(profile_);
+#endif
 }

 #if defined(ON_FOCUS_PING_ENABLED)
@@ -935,6 +944,7 @@ void ChromePasswordManagerClient::MaybeReportEnterpriseLoginEvent(
     bool is_federated,
     const url::Origin& federated_origin,
     const std::u16string& login_user_name) const {
+#if 0
   if (!base::FeatureList::IsEnabled(policy::features::kLoginEventReporting))
     return;

@@ -947,10 +957,12 @@ void ChromePasswordManagerClient::MaybeReportEnterpriseLoginEvent(
   // The router is responsible for checking if the reporting of this event type
   // is enabled by the admin.
   router->OnLoginEvent(url, is_federated, federated_origin, login_user_name);
+#endif
 }

 void ChromePasswordManagerClient::MaybeReportEnterprisePasswordBreachEvent(
     const std::vector<std::pair<GURL, std::u16string>>& identities) const {
+#if 0
   if (!base::FeatureList::IsEnabled(
           policy::features::kPasswordBreachEventReporting)) {
     return;
@@ -965,6 +977,7 @@ void ChromePasswordManagerClient::MaybeReportEnterprisePasswordBreachEvent(
   // The router is responsible for checking if the reporting of this event type
   // is enabled by the admin.
   router->OnPasswordBreach(kPasswordBreachEntryTrigger, identities);
+#endif
 }
 #endif

@@ -1546,7 +1559,7 @@ bool ChromePasswordManagerClient::IsPasswordManagementEnabledForCurrentPage(
       GURL(password_manager::kPasswordManagerAccountDashboardURL)) {
     is_enabled = false;
   }
-
+#if 0
   // SafeBrowsing Delayed Warnings experiment can delay some SafeBrowsing
   // warnings until user interaction. If the current page has a delayed warning,
   // it'll have a user interaction observer attached. Disable password
@@ -1557,6 +1570,7 @@ bool ChromePasswordManagerClient::IsPasswordManagementEnabledForCurrentPage(
     observer->OnPasswordSaveOrAutofillDenied();
     is_enabled = false;
   }
+#endif

   if (log_manager_->IsLoggingActive()) {
     password_manager::BrowserSavePasswordProgressLogger logger(
