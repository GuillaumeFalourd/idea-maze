diff --git a/chrome/browser/browser_process_impl.cc b/chrome/browser/browser_process_impl.cc
index 362f37e2db..cea95e953d 100644
--- a/chrome/browser/browser_process_impl.cc
+++ b/chrome/browser/browser_process_impl.cc
@@ -1,7 +1,7 @@
 // Copyright (c) 2012 The Chromium Authors. All rights reserved.
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
-
+#pragma clang diagnostic ignored "-Wunreachable-code"
 #include "chrome/browser/browser_process_impl.h"

 #include <stddef.h>
@@ -407,8 +407,10 @@ void BrowserProcessImpl::StartTearDown() {

   metrics_services_manager_.reset();
   intranet_redirect_detector_.reset();
+#if 0
   if (safe_browsing_service_.get())
     safe_browsing_service()->ShutDown();
+#endif
   network_time_tracker_.reset();

 #if !BUILDFLAG(IS_ANDROID) && !BUILDFLAG(IS_CHROMEOS_ASH)
@@ -1068,6 +1070,7 @@ void BrowserProcessImpl::StartAutoupdateTimer() {
 }
 #endif

+#if 1
 component_updater::ComponentUpdateService*
 BrowserProcessImpl::component_updater() {
   if (component_updater_)
@@ -1089,6 +1092,7 @@ BrowserProcessImpl::component_updater() {

   return component_updater_.get();
 }
+#endif

 void BrowserProcessImpl::OnKeepAliveStateChanged(bool is_keeping_alive) {
   if (is_keeping_alive)
@@ -1119,8 +1123,11 @@ void BrowserProcessImpl::PreCreateThreads() {
 #if BUILDFLAG(ENABLE_EXTENSIONS)
   // chrome-extension:// URLs are safe to request anywhere, but may only
   // commit (including in iframes) in extension processes.
-  ChildProcessSecurityPolicy::GetInstance()->RegisterWebSafeIsolatedScheme(
-      extensions::kExtensionScheme, true);
+  // NWJS: Upstream: Remove command line/field trial support for
+  // disabling Isolate
+  // Extensions. https://codereview.chromium.org/2850793005
+  ChildProcessSecurityPolicy::GetInstance()->RegisterWebSafeScheme(
+      extensions::kExtensionScheme);
 #endif

   battery_metrics_ = std::make_unique<BatteryMetrics>();
@@ -1289,6 +1296,7 @@ void BrowserProcessImpl::CreateSafeBrowsingService() {
   // Set this flag to true so that we don't retry indefinitely to
   // create the service class if there was an error.
   created_safe_browsing_service_ = true;
+#if 0

   // The factory can be overridden in tests.
   if (!safe_browsing::SafeBrowsingServiceInterface::HasFactory()) {
@@ -1302,6 +1310,7 @@ void BrowserProcessImpl::CreateSafeBrowsingService() {
       safe_browsing::SafeBrowsingServiceInterface::CreateSafeBrowsingService());
   if (safe_browsing_service_)
     safe_browsing_service_->Initialize();
+#endif
 }

 void BrowserProcessImpl::CreateSubresourceFilterRulesetService() {
@@ -1368,7 +1377,7 @@ void BrowserProcessImpl::ApplyDefaultBrowserPolicy() {

 void BrowserProcessImpl::Pin() {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-  CHECK(!IsShuttingDown());
+  //CHECK(!IsShuttingDown());
 }

 void BrowserProcessImpl::Unpin() {
