diff --git a/chrome/browser/component_updater/widevine_cdm_component_installer.cc b/chrome/browser/component_updater/widevine_cdm_component_installer.cc
index 478ce0e772..fefdd6940a 100644
--- a/chrome/browser/component_updater/widevine_cdm_component_installer.cc
+++ b/chrome/browser/component_updater/widevine_cdm_component_installer.cc
@@ -100,7 +100,7 @@ base::FilePath GetPlatformDirectory(const base::FilePath& base_path) {
   return base_path.AppendASCII("_platform_specific").AppendASCII(platform_arch);
 }

-#if !BUILDFLAG(IS_LINUX) && !BUILDFLAG(IS_CHROMEOS)
+#if 1 //!BUILDFLAG(IS_LINUX) && !BUILDFLAG(IS_CHROMEOS)
 // On Linux the Widevine CDM is loaded at startup before the zygote is locked
 // down. As a result there is no need to register the CDM with Chrome as it
 // can't be used until Chrome is restarted. Instead we simply update the hint
@@ -260,7 +260,7 @@ void WidevineCdmComponentInstallerPolicy::UpdateCdmPath(
     return;
   }

-#if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
+#if 0 //BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
   VLOG(1) << "Updating hint file with Widevine CDM " << cdm_version;

   // This is running on a thread that allows IO, so simply update the hint file.
@@ -281,4 +281,12 @@ void RegisterWidevineCdmComponent(ComponentUpdateService* cus) {
   installer->Register(cus, base::OnceClosure());
 }

+void RegisterWidevineCdmComponent(ComponentUpdateService* cus,
+                                  base::OnceClosure callback) {
+  auto installer = base::MakeRefCounted<ComponentInstaller>(
+          std::make_unique<WidevineCdmComponentInstallerPolicy>());
+  installer->Register(cus, std::move(callback));
+}
+
+
 }  // namespace component_updater
