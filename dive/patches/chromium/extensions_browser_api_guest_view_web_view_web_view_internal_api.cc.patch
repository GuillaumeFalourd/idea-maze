diff --git a/extensions/browser/api/guest_view/web_view/web_view_internal_api.cc b/extensions/browser/api/guest_view/web_view/web_view_internal_api.cc
index c743f0cf3d..75431e4dce 100644
--- a/extensions/browser/api/guest_view/web_view/web_view_internal_api.cc
+++ b/extensions/browser/api/guest_view/web_view/web_view_internal_api.cc
@@ -155,7 +155,7 @@ std::unique_ptr<extensions::UserScript> ParseContentScript(
   // if needed.
   bool allowed_everywhere =
       extension && extensions::PermissionsData::CanExecuteScriptEverywhere(
-                       extension->id(), extension->location());
+                                                                           extension->id(), extension->location(), extension->GetType());
   for (const std::string& match : script_value.matches) {
     URLPattern pattern(UserScript::ValidUserScriptSchemes(allowed_everywhere));
     if (pattern.Parse(match) != URLPattern::ParseResult::kSuccess) {
@@ -871,6 +871,40 @@ WebViewInternalLoadDataWithBaseUrlFunction::Run() {
   return RespondNow(Error(std::move(error)));
 }

+WebViewInternalShowDevToolsFunction::WebViewInternalShowDevToolsFunction() {
+}
+
+WebViewInternalShowDevToolsFunction::~WebViewInternalShowDevToolsFunction() {
+}
+
+ExtensionFunction::ResponseAction
+WebViewInternalShowDevToolsFunction::Run() {
+  std::unique_ptr<web_view_internal::ShowDevTools::Params> params(
+             web_view_internal::ShowDevTools::Params::Create(args()));
+  EXTENSION_FUNCTION_VALIDATE(params.get());
+
+  int proc_id = params->proc_id ? *params->proc_id : -1;
+  int guest_id = params->guest_id ? *params->guest_id : -1;
+  guest_->ShowDevTools(params->show, proc_id, guest_id);
+  return RespondNow(NoArguments());
+}
+
+WebViewInternalInspectElementAtFunction::WebViewInternalInspectElementAtFunction() {
+}
+
+WebViewInternalInspectElementAtFunction::~WebViewInternalInspectElementAtFunction() {
+}
+
+ExtensionFunction::ResponseAction
+WebViewInternalInspectElementAtFunction::Run() {
+  std::unique_ptr<web_view_internal::InspectElementAt::Params> params(
+           web_view_internal::InspectElementAt::Params::Create(args()));
+  EXTENSION_FUNCTION_VALIDATE(params.get());
+
+  guest_->InspectElement(params->x, params->y);
+  return RespondNow(NoArguments());
+}
+
 WebViewInternalGoFunction::WebViewInternalGoFunction() {
 }

