diff --git a/net/cert/multi_threaded_cert_verifier.cc b/net/cert/multi_threaded_cert_verifier.cc
index d4e137fb99..d660ac5038 100644
--- a/net/cert/multi_threaded_cert_verifier.cc
+++ b/net/cert/multi_threaded_cert_verifier.cc
@@ -71,7 +71,7 @@ std::unique_ptr<ResultHelper> DoVerifyOnWorkerThread(
     const std::string& sct_list,
     int flags,
     const scoped_refptr<CRLSet>& crl_set,
-    const CertificateList& additional_trust_anchors,
+    const CertificateList* additional_trust_anchors,
     const NetLogWithSource& net_log) {
   TRACE_EVENT0(NetTracingCategory(), "DoVerifyOnWorkerThread");
   auto verify_result = std::make_unique<ResultHelper>();
@@ -80,7 +80,7 @@ std::unique_ptr<ResultHelper> DoVerifyOnWorkerThread(
       allow_base_sync_primitives;
   verify_result->error = verify_proc->Verify(
       cert.get(), hostname, ocsp_response, sct_list, flags, crl_set.get(),
-      additional_trust_anchors, &verify_result->result, net_log);
+      *additional_trust_anchors, &verify_result->result, net_log);
   // The CertVerifyResult is created and populated on the worker thread and
   // then returned to the network thread. Detach now before returning the
   // result, since any further access will be on the network thread.
@@ -159,7 +159,7 @@ void MultiThreadedCertVerifier::InternalRequest::Start(
       base::BindOnce(&DoVerifyOnWorkerThread, verify_proc, params.certificate(),
                      params.hostname(), params.ocsp_response(),
                      params.sct_list(), flags, config.crl_set,
-                     config.additional_trust_anchors, net_log),
+                     &config.additional_trust_anchors, net_log),
       base::BindOnce(&MultiThreadedCertVerifier::InternalRequest::OnJobComplete,
                      weak_factory_.GetWeakPtr()));
 }
