diff --git a/chrome/browser/shell_integration_linux.cc b/chrome/browser/shell_integration_linux.cc
index 070acc504b..ed63c6307a 100644
--- a/chrome/browser/shell_integration_linux.cc
+++ b/chrome/browser/shell_integration_linux.cc
@@ -53,6 +53,8 @@
 #include "components/version_info/version_info.h"
 #include "third_party/libxml/chromium/xml_writer.h"
 #include "third_party/re2/src/re2/re2.h"
+#include "content/nw/src/nw_base.h"
+#include "content/nw/src/nw_package.h"
 #include "ui/base/resource/resource_bundle.h"
 #include "ui/gfx/image/image_family.h"
 #include "ui/ozone/public/ozone_platform.h"
@@ -194,6 +196,7 @@ shell_integration::DefaultWebClientState GetIsDefaultWebClient(
 // the .desktop extension.  We cannot simply use argv[0] in this case, because
 // on the stable channel, the executable name is google-chrome-stable, but the
 // desktop file is google-chrome.desktop.
+#if 1
 std::string GetDesktopBaseName(const std::string& desktop_file_name) {
   static const char kDesktopExtension[] = ".desktop";
   if (base::EndsWith(desktop_file_name, kDesktopExtension,
@@ -203,6 +206,7 @@ std::string GetDesktopBaseName(const std::string& desktop_file_name) {
   }
   return desktop_file_name;
 }
+#endif

 namespace {

@@ -420,6 +424,10 @@ base::FilePath GetChromeExePath() {

 std::string GetProgramClassName(const base::CommandLine& command_line,
                                 const std::string& desktop_file_name) {
+  // NW fix
+  // set WM_NAME to name of package.json
+  return nw::package()->GetName();
+#if 0
   std::string class_name = GetDesktopBaseName(desktop_file_name);
   std::string user_data_dir =
       command_line.GetSwitchValueNative(switches::kUserDataDir);
@@ -430,12 +438,18 @@ std::string GetProgramClassName(const base::CommandLine& command_line,
   return user_data_dir.empty()
              ? class_name
              : class_name + " (" + user_data_dir + ")";
+#endif
 }

 std::string GetProgramClassClass(const base::CommandLine& command_line,
                                  const std::string& desktop_file_name) {
   if (command_line.HasSwitch(switches::kWmClass))
     return command_line.GetSwitchValueASCII(switches::kWmClass);
+  // NW fix
+  // set WM_CLASS as name in package.json and allowed to be overwritten
+  // with --class CLI parameter
+  return nw::package()->GetName();
+#if 0
   std::string desktop_base_name = GetDesktopBaseName(desktop_file_name);
   if (auto* platform_utils =
           ui::OzonePlatform::GetInstance()->GetPlatformUtils()) {
@@ -446,6 +460,7 @@ std::string GetProgramClassClass(const base::CommandLine& command_line,
     desktop_base_name[0] = base::ToUpperASCII(desktop_base_name[0]);
   }
   return desktop_base_name;
+#endif
 }

 }  // namespace internal
