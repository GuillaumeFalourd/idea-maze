diff --git a/chrome/browser/extensions/extension_system_impl.cc b/chrome/browser/extensions/extension_system_impl.cc
index b8e689b9bb..3c4885e31c 100644
--- a/chrome/browser/extensions/extension_system_impl.cc
+++ b/chrome/browser/extensions/extension_system_impl.cc
@@ -76,6 +76,8 @@
 #include "components/user_manager/user_manager.h"
 #endif

+#include "content/nw/src/nw_content_verifier_delegate.h"
+
 namespace extensions {

 namespace {
@@ -197,7 +199,7 @@ void ExtensionSystemImpl::Shared::Init(bool extensions_enabled) {
   LoadErrorReporter::Init(allow_noisy_errors);

   content_verifier_ = new ContentVerifier(
-      profile_, std::make_unique<ChromeContentVerifierDelegate>(profile_));
+      profile_, std::make_unique<NWContentVerifierDelegate>(profile_));

   service_worker_manager_ = std::make_unique<ServiceWorkerManager>(profile_);

@@ -214,7 +216,7 @@ void ExtensionSystemImpl::Shared::Init(bool extensions_enabled) {
   extension_service_ = std::make_unique<ExtensionService>(
       profile_, base::CommandLine::ForCurrentProcess(),
       profile_->GetPath().AppendASCII(extensions::kInstallDirectoryName),
-      ExtensionPrefs::Get(profile_), Blocklist::Get(profile_),
+      ExtensionPrefs::Get(profile_), nullptr,
       autoupdate_enabled, extensions_enabled, &ready_);

   uninstall_ping_sender_ = std::make_unique<UninstallPingSender>(
@@ -225,8 +227,8 @@ void ExtensionSystemImpl::Shared::Init(bool extensions_enabled) {
   // load any extensions.
   {
     InstallVerifier::Get(profile_)->Init();
-    ChromeContentVerifierDelegate::VerifyInfo::Mode mode =
-        ChromeContentVerifierDelegate::GetDefaultMode();
+    ChromeContentVerifierDelegate::VerifyInfo::Mode mode = (ChromeContentVerifierDelegate::VerifyInfo::Mode)
+        NWContentVerifierDelegate::GetDefaultMode();
 #if BUILDFLAG(IS_CHROMEOS_ASH)
     mode = std::max(mode,
                     ChromeContentVerifierDelegate::VerifyInfo::Mode::BOOTSTRAP);
