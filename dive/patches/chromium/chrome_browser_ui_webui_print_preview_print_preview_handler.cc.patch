diff --git a/chrome/browser/ui/webui/print_preview/print_preview_handler.cc b/chrome/browser/ui/webui/print_preview/print_preview_handler.cc
index 94ee1b5288..6bf0bae1e1 100644
--- a/chrome/browser/ui/webui/print_preview/print_preview_handler.cc
+++ b/chrome/browser/ui/webui/print_preview/print_preview_handler.cc
@@ -4,6 +4,8 @@

 #include "chrome/browser/ui/webui/print_preview/print_preview_handler.h"

+#include "base/no_destructor.h"
+#include "base/json/json_writer.h"
 #include <ctype.h>
 #include <stddef.h>

@@ -87,6 +89,15 @@
 using content::RenderFrameHost;
 using content::WebContents;

+namespace {
+static base::NoDestructor<std::string> g_nw_printer_name;
+static base::NoDestructor<base::FilePath> g_nw_print_to_pdf_path;
+static base::NoDestructor< std::unique_ptr<base::DictionaryValue> > g_nw_print_options;
+
+bool g_nw_custom_printing = false;
+
+}
+
 namespace printing {

 namespace {
@@ -391,7 +402,38 @@ base::Value::Dict GetPolicies(const PrefService& prefs) {
 #endif  // BUILDFLAG(IS_CHROMEOS)

 }  // namespace
+} // namespace printing
+
+namespace chrome {
+void NWPrintSetCustomPrinting(bool value) {
+  g_nw_custom_printing = value;
+}
+
+bool NWPrintGetCustomPrinting() {
+  return g_nw_custom_printing;
+}
+
+void NWPrintSetOptions(const base::DictionaryValue* dict, WebContents* web_contents) {
+  *g_nw_print_options = dict->CreateDeepCopy();
+  absl::optional<bool> silent_printing = (*g_nw_print_options)->FindBoolKey("silent");
+  if (silent_printing && web_contents)
+    web_contents->set_silent_printing(*silent_printing);
+}
+
+void NWPrintSetPDFPath(const base::FilePath& path) {
+  *g_nw_print_to_pdf_path = path;
+}
+
+const base::FilePath& NWPrintGetPDFPath() {
+  return *g_nw_print_to_pdf_path;
+}
+
+void NWPrintSetDefaultPrinter(const std::string& printer_name) {
+  *g_nw_printer_name = printer_name;
+}
+}

+namespace printing {
 PrintPreviewHandler::PrintPreviewHandler() {
 #if BUILDFLAG(IS_CHROMEOS_ASH)
   DCHECK(crosapi::CrosapiManager::IsInitialized());
@@ -685,6 +727,35 @@ void PrintPreviewHandler::HandleGetPreview(const base::Value::List& args) {
   absl::optional<bool> display_header_footer_opt =
       settings.FindBool(kSettingHeaderFooterEnabled);
   DCHECK(display_header_footer_opt);
+  std::string footer_string, header_string;
+  if (*g_nw_print_options) {
+    int margins_type;
+    int scale;
+    base::DictionaryValue* media_size_value = nullptr;
+    base::DictionaryValue* custom_margins = nullptr;
+    absl::optional<bool> display_header_footer;
+
+    if ((*g_nw_print_options)->GetDictionary(printing::kSettingMediaSize, &media_size_value) && !media_size_value->DictEmpty())
+      settings.Set(printing::kSettingMediaSize, media_size_value->Clone());
+    display_header_footer = (*g_nw_print_options)->FindBoolKey(printing::kSettingHeaderFooterEnabled);
+    if (display_header_footer)
+      settings.Set(printing::kSettingHeaderFooterEnabled, *display_header_footer);
+    absl::optional<bool> landscape = (*g_nw_print_options)->FindBoolKey(printing::kSettingLandscape);
+    if (landscape)
+      settings.Set(printing::kSettingLandscape, *landscape);
+    absl::optional<bool> backgrounds = (*g_nw_print_options)->FindBoolKey(printing::kSettingShouldPrintBackgrounds);
+    if (backgrounds)
+      settings.Set(printing::kSettingShouldPrintBackgrounds, *backgrounds);
+    if ((*g_nw_print_options)->GetInteger(printing::kSettingMarginsType, &margins_type))
+      settings.Set(printing::kSettingMarginsType, margins_type);
+    if ((*g_nw_print_options)->GetDictionary(printing::kSettingMarginsCustom, &custom_margins) && !custom_margins->DictEmpty())
+      settings.Set(printing::kSettingMarginsCustom, custom_margins->Clone());
+    if ((*g_nw_print_options)->GetInteger(printing::kSettingScaleFactor, &scale))
+      settings.Set(printing::kSettingScaleFactor, scale);
+    (*g_nw_print_options)->GetString("footerString", &footer_string);
+    (*g_nw_print_options)->GetString("headerString", &header_string);
+  }
+
   if (display_header_footer_opt.value_or(false)) {
     settings.Set(kSettingHeaderFooterTitle, initiator->GetTitle());

@@ -692,9 +763,14 @@ void PrintPreviewHandler::HandleGetPreview(const base::Value::List& args) {
     url_sanitizer.ClearUsername();
     url_sanitizer.ClearPassword();
     const GURL& initiator_url = initiator->GetLastCommittedURL();
+    if (footer_string.empty())
     settings.Set(kSettingHeaderFooterURL,
                  url_formatter::FormatUrl(
                      initiator_url.ReplaceComponents(url_sanitizer)));
+    else
+      settings.Set(printing::kSettingHeaderFooterURL, footer_string);
+    if (!header_string.empty())
+      settings.Set(printing::kSettingHeaderFooterTitle, header_string);
   }

   VLOG(1) << "Print preview request start";
@@ -717,10 +793,26 @@ void PrintPreviewHandler::HandlePrint(const base::Value::List& args) {
   const std::string& callback_id = args[0].GetString();
   CHECK(!callback_id.empty());
   CHECK(args[1].is_string());
-  const std::string& json_str = args[1].GetString();
+  std::string json_str = args[1].GetString();

+  int copies;
   base::Value::Dict settings = GetSettingsDictionary(json_str);
   const UserActionBuckets user_action = DetermineUserAction(settings);
+  if ((*g_nw_print_options)) {
+    base::ListValue* page_range_array = nullptr;
+    bool changed = false;
+
+    if ((*g_nw_print_options)->GetList(printing::kSettingPageRange, &page_range_array) && !page_range_array->GetListDeprecated().empty()) {
+      changed = true;
+      settings.Set(printing::kSettingPageRange, page_range_array->Clone());
+    }
+    if ((*g_nw_print_options)->GetInteger(printing::kSettingCopies, &copies)) {
+      changed = true;
+      settings.Set(printing::kSettingCopies, copies);
+    }
+    if (changed)
+      base::JSONWriter::Write(settings, &json_str);
+  }

   int page_count = settings.FindInt(kSettingPreviewPageCount).value_or(-1);
   if (page_count <= 0) {
@@ -758,6 +850,7 @@ void PrintPreviewHandler::HandlePrint(const base::Value::List& args) {
                       std::move(settings), data,
                       base::BindOnce(&PrintPreviewHandler::OnPrintResult,
                                      weak_factory_.GetWeakPtr(), callback_id));
+  chrome::NWPrintSetCustomPrinting(false);
 }

 void PrintPreviewHandler::HandleHidePreview(const base::Value::List& /*args*/) {
@@ -889,7 +982,7 @@ void PrintPreviewHandler::SendInitialSettings(
   bool source_is_arc = false;
 #endif
   initial_settings.Set(kSettingPreviewIsFromArc, source_is_arc);
-  initial_settings.Set(kSettingPrinterName, default_printer);
+  initial_settings.Set(kSettingPrinterName, (*g_nw_printer_name).empty() ? default_printer : *g_nw_printer_name);
   initial_settings.Set(kDocumentHasSelection,
                        print_preview_ui()->source_has_selection());
   initial_settings.Set(kSettingShouldPrintSelectionOnly,
@@ -918,8 +1011,11 @@ void PrintPreviewHandler::SendInitialSettings(

   base::CommandLine* cmdline = base::CommandLine::ForCurrentProcess();
   initial_settings.Set(kIsInKioskAutoPrintMode,
-                       cmdline->HasSwitch(switches::kKioskModePrinting));
+                       cmdline->HasSwitch(switches::kKioskModePrinting) || g_nw_custom_printing);
   initial_settings.Set(kIsInAppKioskMode, chrome::IsRunningInForcedAppMode());
+  initial_settings.Set("nwPrintMode", g_nw_custom_printing);
+  if (g_nw_custom_printing || !(*g_nw_printer_name).empty())
+    initial_settings.Set(kAppState, base::Value());
   const std::string rules_str =
       prefs->GetString(prefs::kPrintPreviewDefaultDestinationSelectionRules);
   if (rules_str.empty()) {
