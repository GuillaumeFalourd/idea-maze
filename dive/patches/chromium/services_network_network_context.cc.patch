diff --git a/services/network/network_context.cc b/services/network/network_context.cc
index 3ee7e8145e..39c3960efc 100644
--- a/services/network/network_context.cc
+++ b/services/network/network_context.cc
@@ -2,6 +2,7 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.

+#pragma clang diagnostic ignored "-Wunused-function"
 #include "services/network/network_context.h"

 #include <memory>
@@ -9,6 +10,9 @@
 #include <tuple>
 #include <utility>

+#include "content/nw/src/policy_cert_verifier.h"
+#include "net/cert/cert_verify_proc.h"
+
 #include "base/barrier_closure.h"
 #include "base/base64.h"
 #include "base/bind.h"
@@ -1333,6 +1337,10 @@ void NetworkContext::SetEnablePreconnect(bool enable_preconnect) {
   params_->enable_preconnect = enable_preconnect;
 }

+void NetworkContext::SetTrustAnchors(const net::CertificateList& anchors) {
+  nw_cert_verifier_->SetTrustAnchors(anchors);
+}
+
 #if BUILDFLAG(IS_CHROMEOS)
 void NetworkContext::UpdateAdditionalCertificates(
     mojom::AdditionalCertificatesPtr additional_certificates) {
@@ -2289,6 +2297,7 @@ URLRequestContextOwner NetworkContext::MakeURLRequestContext(
         base::BindRepeating(
             &NetworkContext::CreateURLLoaderFactoryForCertNetFetcher,
             base::Unretained(this)));
+#if 0

 #if BUILDFLAG(IS_CT_SUPPORTED)
     std::vector<scoped_refptr<const net::CTLogVerifier>> ct_logs;
@@ -2324,6 +2333,14 @@ URLRequestContextOwner NetworkContext::MakeURLRequestContext(
         std::move(cert_verifier));
     cert_verifier = base::WrapUnique(cert_verifier_with_trust_anchors_.get());
 #endif  // BUILDFLAG(IS_CHROMEOS)
+#endif
+    cert_verifier = std::make_unique<nw::PolicyCertVerifier>(base::RepeatingClosure());
+    nw_cert_verifier_ = (nw::PolicyCertVerifier*)cert_verifier.get();
+#if BUILDFLAG(IS_LINUX)
+    nw_cert_verifier_->InitializeOnIOThread(net::CertVerifyProc::CreateBuiltinVerifyProc(cert_net_fetcher_));
+#else
+    nw_cert_verifier_->InitializeOnIOThread(net::CertVerifyProc::CreateSystemVerifyProc(cert_net_fetcher_));
+#endif
   }

   builder.SetCertVerifier(IgnoreErrorsCertVerifier::MaybeWrapCertVerifier(
