diff --git a/extensions/browser/extension_frame_host.cc b/extensions/browser/extension_frame_host.cc
index 8e4db88233..55df9f9d88 100644
--- a/extensions/browser/extension_frame_host.cc
+++ b/extensions/browser/extension_frame_host.cc
@@ -49,4 +49,36 @@ void ExtensionFrameHost::Request(mojom::RequestParamsPtr params,
 void ExtensionFrameHost::WatchedPageChange(
     const std::vector<std::string>& css_selectors) {}

+void ExtensionFrameHost::RequestSync(mojom::RequestParamsPtr params,
+                                     RequestSyncCallback callback) {
+  content::RenderFrameHost* render_frame_host =
+      receivers_.GetCurrentTargetFrame();
+  base::Value::List list_value;
+  bool success = false;
+  std::string error;
+  ExtensionWebContentsObserver::GetForWebContents(web_contents_)
+      ->dispatcher()
+    ->DispatchSync(std::move(params), &success, &list_value, &error,
+                   render_frame_host,
+                   render_frame_host->GetProcess()->GetID());
+  std::move(callback).Run(success, std::move(list_value), error);
+}
+
+bool ExtensionFrameHost::RequestSync(mojom::RequestParamsPtr params,
+                                     bool* success,
+                                     base::Value::List* response,
+                                     std::string* error) {
+  base::Value::List* list_value = response;
+  //  if (!response->GetAsList(list_value))
+  //  return false;
+  content::RenderFrameHost* render_frame_host =
+      receivers_.GetCurrentTargetFrame();
+  ExtensionWebContentsObserver::GetForWebContents(web_contents_)
+      ->dispatcher()
+    ->DispatchSync(std::move(params), success, list_value, error,
+                   render_frame_host,
+                   render_frame_host->GetProcess()->GetID());
+  return true;
+}
+
 }  // namespace extensions
