diff --git a/chrome/browser/ui/chrome_pages.cc b/chrome/browser/ui/chrome_pages.cc
index 546f6c2d19..fd7f7be311 100644
--- a/chrome/browser/ui/chrome_pages.cc
+++ b/chrome/browser/ui/chrome_pages.cc
@@ -78,7 +78,7 @@ using base::UserMetricsAction;
 namespace chrome {
 namespace {

-const char kHashMark[] = "#";
+//const char kHashMark[] = "#";

 void FocusWebContents(Browser* browser) {
   auto* const contents = browser->tab_strip_model()->GetActiveWebContents();
@@ -176,6 +176,7 @@ void ShowHelpImpl(Browser* browser, Profile* profile, HelpSource source) {
 #endif  // BUILDFLAG(IS_CHROMEOS_ASH) && BUILDFLAG(GOOGLE_CHROME_BRANDING)
 }

+#if 0
 std::string GenerateContentSettingsExceptionsSubPage(ContentSettingsType type) {
   // In MD Settings, the exceptions no longer have a separate subpage.
   // This list overrides the group names defined in site_settings_helper for the
@@ -202,6 +203,7 @@ std::string GenerateContentSettingsExceptionsSubPage(ContentSettingsType type) {
                            ? site_settings::ContentSettingsTypeToGroupName(type)
                            : it->second});
 }
+#endif

 void ShowSiteSettingsImpl(Browser* browser, Profile* profile, const GURL& url) {
   // If a valid non-file origin, open a settings page specific to the current
@@ -400,15 +402,19 @@ void ShowSettingsSubPageInTabbedBrowser(Browser* browser,

 void ShowContentSettingsExceptions(Browser* browser,
                                    ContentSettingsType content_settings_type) {
+#if 0
   ShowSettingsSubPage(
       browser, GenerateContentSettingsExceptionsSubPage(content_settings_type));
+#endif
 }

 void ShowContentSettingsExceptionsForProfile(
     Profile* profile,
     ContentSettingsType content_settings_type) {
+#if 0
   ShowSettingsSubPageForProfile(
       profile, GenerateContentSettingsExceptionsSubPage(content_settings_type));
+#endif
 }

 void ShowSiteSettings(Browser* browser, const GURL& url) {
@@ -422,10 +428,12 @@ void ShowSiteSettings(Profile* profile, const GURL& url) {

 void ShowContentSettings(Browser* browser,
                          ContentSettingsType content_settings_type) {
+#if 0
   ShowSettingsSubPage(
       browser, base::StrCat({kContentSettingsSubPage, kHashMark,
                              site_settings::ContentSettingsTypeToGroupName(
                                  content_settings_type)}));
+#endif
 }

 void ShowClearBrowsingDataDialog(Browser* browser) {
