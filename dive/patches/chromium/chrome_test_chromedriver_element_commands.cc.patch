diff --git a/chrome/test/chromedriver/element_commands.cc b/chrome/test/chromedriver/element_commands.cc
index 5d4be7dd6b..48742d8519 100644
--- a/chrome/test/chromedriver/element_commands.cc
+++ b/chrome/test/chromedriver/element_commands.cc
@@ -45,54 +45,6 @@ const std::set<std::string> inputControlTypes = {

 const std::set<std::string> nontypeableControlTypes = {"color"};

-const std::unordered_set<std::string> booleanAttributes = {
-    "allowfullscreen",
-    "allowpaymentrequest",
-    "allowusermedia",
-    "async",
-    "autofocus",
-    "autoplay",
-    "checked",
-    "compact",
-    "complete",
-    "controls",
-    "declare",
-    "default",
-    "defaultchecked",
-    "defaultselected",
-    "defer",
-    "disabled",
-    "ended",
-    "formnovalidate",
-    "hidden",
-    "indeterminate",
-    "iscontenteditable",
-    "ismap",
-    "itemscope",
-    "loop",
-    "multiple",
-    "muted",
-    "nohref",
-    "nomodule",
-    "noresize",
-    "noshade",
-    "novalidate",
-    "nowrap",
-    "open",
-    "paused",
-    "playsinline",
-    "pubdate",
-    "readonly",
-    "required",
-    "reversed",
-    "scoped",
-    "seamless",
-    "seeking",
-    "selected",
-    "truespeed",
-    "typemustmatch",
-    "willvalidate"};
-
 namespace {

 Status FocusToElement(
@@ -1040,28 +992,11 @@ Status ExecuteGetElementAttribute(Session* session,
                                   const std::string& element_id,
                                   const base::DictionaryValue& params,
                                   std::unique_ptr<base::Value>* value) {
-  std::string attribute_name;
-  if (!params.GetString("name", &attribute_name))
+  std::string name;
+  if (!params.GetString("name", &name))
     return Status(kInvalidArgument, "missing 'name'");
-
-  // In legacy mode, use old behavior for backward compatibility.
-  if (!session->w3c_compliant) {
-    return GetElementAttribute(session, web_view, element_id, attribute_name,
-                               value);
-  }
-
-  Status status = CheckElement(element_id);
-  if (status.IsError())
-    return status;
-  base::Value::List args;
-  args.Append(CreateElement(element_id));
-  args.Append(attribute_name);
-  return web_view->CallFunction(
-      session->GetCurrentFrameId(),
-      booleanAttributes.count(base::ToLowerASCII(attribute_name))
-          ? "(elem, attribute) => elem.hasAttribute(attribute) ? 'true' : null"
-          : "(elem, attribute) => elem.getAttribute(attribute)",
-      args, value);
+  return GetElementAttribute(session, web_view, element_id, name,
+                             value);
 }

 Status ExecuteGetElementValueOfCSSProperty(
