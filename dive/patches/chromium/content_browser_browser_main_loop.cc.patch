diff --git a/content/browser/browser_main_loop.cc b/content/browser/browser_main_loop.cc
index 85b116addb..b7900f04b2 100644
--- a/content/browser/browser_main_loop.cc
+++ b/content/browser/browser_main_loop.cc
@@ -432,6 +432,8 @@ void BindHidManager(mojo::PendingReceiver<device::mojom::HidManager> receiver) {
 // The currently-running BrowserMainLoop.  There can be one or zero.
 BrowserMainLoop* g_current_browser_main_loop = nullptr;

+bool g_browser_main_loop_shutting_down = false;
+
 #if BUILDFLAG(IS_ANDROID)

 namespace {
@@ -948,6 +950,7 @@ int BrowserMainLoop::PreMainMessageLoopRun() {
   if (parts_)
     result_code_ = parts_->PreMainMessageLoopRun();

+#if 1
   // ShellBrowserMainParts initializes a ShellBrowserContext with user data
   // directory only in PreMainMessageLoopRun(). First-Party Sets handler needs
   // to access this directory, hence triggering after this stage has run.
@@ -955,6 +958,7 @@ int BrowserMainLoop::PreMainMessageLoopRun() {
       GetContentClient()->browser()->GetFirstPartySetsDirectory(),
       base::CommandLine::ForCurrentProcess()->GetSwitchValueASCII(
           network::switches::kUseFirstPartySet));
+#endif

   variations::MaybeScheduleFakeCrash();

@@ -1077,8 +1081,9 @@ void BrowserMainLoop::ShutdownThreadsAndCleanUp() {
       base::BindOnce(base::IgnoreResult(
           &base::PermanentThreadAllowance::AllowBaseSyncPrimitives)));

-  if (RenderProcessHost::run_renderer_in_process())
-    RenderProcessHostImpl::ShutDownInProcessRenderer();
+#if 1 //defined(OS_ANDROID)
+  g_browser_main_loop_shutting_down = true;
+#endif

   if (parts_) {
     TRACE_EVENT0("shutdown",
@@ -1086,6 +1091,9 @@ void BrowserMainLoop::ShutdownThreadsAndCleanUp() {
     parts_->PostMainMessageLoopRun();
   }

+  if (RenderProcessHost::run_renderer_in_process())
+    RenderProcessHostImpl::ShutDownInProcessRenderer();
+
   // Request shutdown to clean up allocated resources on the IO thread.
   if (midi_service_) {
     TRACE_EVENT0("shutdown", "BrowserMainLoop::Subsystem:MidiService");
