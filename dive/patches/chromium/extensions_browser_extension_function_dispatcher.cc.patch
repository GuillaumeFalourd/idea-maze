diff --git a/extensions/browser/extension_function_dispatcher.cc b/extensions/browser/extension_function_dispatcher.cc
index 768cdfa605..67ace281ef 100644
--- a/extensions/browser/extension_function_dispatcher.cc
+++ b/extensions/browser/extension_function_dispatcher.cc
@@ -214,6 +214,13 @@ class ScopedRequestParamsCrashKeys {
   base::debug::ScopedCrashKeyString extension_id_;
 };

+void DummyCallback(
+                   ExtensionFunction::ResponseType type,
+                   base::Value::List results,
+                   const std::string& error
+                   ) {
+}
+
 }  // namespace

 class ExtensionFunctionDispatcher::ResponseCallbackWrapper
@@ -374,6 +381,19 @@ ExtensionFunctionDispatcher::ExtensionFunctionDispatcher(
 ExtensionFunctionDispatcher::~ExtensionFunctionDispatcher() {
 }

+void ExtensionFunctionDispatcher::DispatchSync(
+                    mojom::RequestParamsPtr params,
+                    bool* success,
+                    base::Value::List* response,
+                    std::string* error,
+                    content::RenderFrameHost* render_frame_host,
+                    int render_process_id) {
+  base::OnceCallback<decltype(DummyCallback)> dummy;
+  DispatchWithCallbackInternal(
+                               *params, render_frame_host, render_process_id, std::move(dummy), true,
+                               success, response, error);
+}
+
 void ExtensionFunctionDispatcher::Dispatch(
     mojom::RequestParamsPtr params,
     content::RenderFrameHost& frame,
@@ -454,7 +474,12 @@ void ExtensionFunctionDispatcher::DispatchWithCallbackInternal(
     const mojom::RequestParams& params,
     content::RenderFrameHost* render_frame_host,
     int render_process_id,
-    ExtensionFunction::ResponseCallback callback) {
+    ExtensionFunction::ResponseCallback callback,
+    bool sync,
+    bool* success,
+    base::Value::List* response,
+    std::string* error
+                                                               ) {
   ProcessMap* process_map = ProcessMap::Get(browser_context_);
   if (!process_map) {
     constexpr char kProcessNotFound[] =
@@ -515,7 +540,12 @@ void ExtensionFunctionDispatcher::DispatchWithCallbackInternal(

     // Skip the quota, event page, activity logging stuff if there
     // isn't an extension, e.g. if the function call was from WebUI.
-    function->RunWithValidation()->Execute();
+    if (!sync)
+      function->RunWithValidation()->Execute();
+    else {
+      *success = function->RunNWSync(response, error);
+      function->did_respond_ = true;
+    }
     return;
   }

@@ -557,7 +587,12 @@ void ExtensionFunctionDispatcher::DispatchWithCallbackInternal(
     }

     base::ElapsedTimer timer;
-    function->RunWithValidation()->Execute();
+    if (!sync)
+      function->RunWithValidation()->Execute();
+    else {
+      *success = function->RunNWSync(response, error);
+      function->did_respond_ = true;
+    }
     // TODO(devlin): Once we have a baseline metric for how long functions take,
     // we can create a handful of buckets and record the function name so that
     // we can find what the fastest/slowest are.
