diff --git a/chrome/browser/download/chrome_download_manager_delegate.cc b/chrome/browser/download/chrome_download_manager_delegate.cc
index 2a6572edc1..64a21c716b 100644
--- a/chrome/browser/download/chrome_download_manager_delegate.cc
+++ b/chrome/browser/download/chrome_download_manager_delegate.cc
@@ -450,12 +450,14 @@ void ChromeDownloadManagerDelegate::SetDownloadManager(DownloadManager* dm) {

   download_manager_ = dm;

+#if 0
   safe_browsing::SafeBrowsingService* sb_service =
       g_browser_process->safe_browsing_service();
   if (sb_service && !profile_->IsOffTheRecord()) {
     // Include this download manager in the set monitored by safe browsing.
     sb_service->AddDownloadManager(dm);
   }
+#endif

   if (download_manager_) {
     download_manager_->AddObserver(this);
@@ -809,6 +811,7 @@ void ChromeDownloadManagerDelegate::ChooseSavePath(
 void ChromeDownloadManagerDelegate::SanitizeSavePackageResourceName(
     base::FilePath* filename,
     const GURL& source_url) {
+#if 0
   safe_browsing::FileTypePolicies* file_type_policies =
       safe_browsing::FileTypePolicies::GetInstance();

@@ -820,6 +823,7 @@ void ChromeDownloadManagerDelegate::SanitizeSavePackageResourceName(
   base::FilePath default_filename = base::FilePath::FromUTF8Unsafe(
       l10n_util::GetStringUTF8(IDS_DEFAULT_DOWNLOAD_FILENAME));
   *filename = filename->AddExtension(default_filename.BaseName().value());
+#endif
 }

 void ChromeDownloadManagerDelegate::SanitizeDownloadParameters(
@@ -859,14 +863,14 @@ void ChromeDownloadManagerDelegate::OpenDownload(DownloadItem* download) {
   download::DownloadItemRenameHandler* handler = download->GetRenameHandler();
   if (handler) {
     handler->OpenDownload();
-    RecordDownloadOpen(DOWNLOAD_OPEN_METHOD_RENAME_HANDLER,
-                       download->GetMimeType());
+    //RecordDownloadOpen(DOWNLOAD_OPEN_METHOD_RENAME_HANDLER,
+    //                   download->GetMimeType());
     return;
   }

   if (!DownloadItemModel(download).ShouldPreferOpeningInBrowser()) {
-    RecordDownloadOpen(DOWNLOAD_OPEN_METHOD_DEFAULT_PLATFORM,
-                       download->GetMimeType());
+    //RecordDownloadOpen(DOWNLOAD_OPEN_METHOD_DEFAULT_PLATFORM,
+    //                   download->GetMimeType());
     OpenDownloadUsingPlatformHandler(download);
     return;
   }
@@ -892,8 +896,8 @@ void ChromeDownloadManagerDelegate::OpenDownload(DownloadItem* download) {
   else
     browser->OpenURL(params);

-  RecordDownloadOpen(DOWNLOAD_OPEN_METHOD_DEFAULT_BROWSER,
-                     download->GetMimeType());
+  //RecordDownloadOpen(DOWNLOAD_OPEN_METHOD_DEFAULT_BROWSER,
+  //                   download->GetMimeType());
 #endif  // BUILDFLAG(IS_ANDROID)
 }

@@ -1641,6 +1645,7 @@ bool ChromeDownloadManagerDelegate::ShouldBlockFile(
 void ChromeDownloadManagerDelegate::MaybeSendDangerousDownloadOpenedReport(
     DownloadItem* download,
     bool show_download_in_folder) {
+#if 0
 #if BUILDFLAG(FULL_SAFE_BROWSING)
   safe_browsing::DownloadProtectionService* service =
       GetDownloadProtectionService();
@@ -1656,6 +1661,7 @@ void ChromeDownloadManagerDelegate::MaybeSendDangerousDownloadOpenedReport(
         download->GetDangerType(), download_content, base::Time::Now(),
         download->GetEndTime(), show_download_in_folder);
   }
+#endif
 }

 void ChromeDownloadManagerDelegate::CheckDownloadAllowed(
@@ -1727,7 +1733,8 @@ void ChromeDownloadManagerDelegate::CheckSavePackageAllowed(

 #if BUILDFLAG(IS_WIN) || BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) || \
     BUILDFLAG(IS_MAC)
-  absl::optional<enterprise_connectors::AnalysisSettings> settings =
+  absl::optional<enterprise_connectors::AnalysisSettings> settings;
+#if 0
       safe_browsing::DeepScanningRequest::ShouldUploadBinary(download_item);

   if (settings.has_value()) {
@@ -1750,6 +1757,7 @@ void ChromeDownloadManagerDelegate::CheckSavePackageAllowed(
       return;
     }
   }
+#endif
 #endif
   std::move(callback).Run(true);
 }
