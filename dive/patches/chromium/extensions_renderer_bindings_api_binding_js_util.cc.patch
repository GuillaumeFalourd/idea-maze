diff --git a/extensions/renderer/bindings/api_binding_js_util.cc b/extensions/renderer/bindings/api_binding_js_util.cc
index 63862962f7..e7479f53e1 100644
--- a/extensions/renderer/bindings/api_binding_js_util.cc
+++ b/extensions/renderer/bindings/api_binding_js_util.cc
@@ -39,6 +39,7 @@ gin::ObjectTemplateBuilder APIBindingJSUtil::GetObjectTemplateBuilder(
     v8::Isolate* isolate) {
   return Wrappable<APIBindingJSUtil>::GetObjectTemplateBuilder(isolate)
       .SetMethod("sendRequest", &APIBindingJSUtil::SendRequest)
+      .SetMethod("sendRequestSync", &APIBindingJSUtil::SendRequestSync)
       .SetMethod("registerEventArgumentMassager",
                  &APIBindingJSUtil::RegisterEventArgumentMassager)
       .SetMethod("createCustomEvent", &APIBindingJSUtil::CreateCustomEvent)
@@ -58,11 +59,44 @@ gin::ObjectTemplateBuilder APIBindingJSUtil::GetObjectTemplateBuilder(
       .SetMethod("addCustomSignature", &APIBindingJSUtil::AddCustomSignature);
 }

+void APIBindingJSUtil::SendRequestSync(
+    gin::Arguments* arguments,
+    const std::string& name,
+    const std::vector<v8::Local<v8::Value>>& request_args,
+    v8::Local<v8::Value> options) {
+  v8::Isolate* isolate = arguments->isolate();
+  v8::HandleScope handle_scope(isolate);
+  bool success;
+  base::Value::List response;
+  std::string error;
+  SendRequestHelper(arguments, name, request_args, options, true, &success, &response, &error);
+  if (!success) {
+    isolate->ThrowException(v8::Exception::Error(gin::StringToV8(isolate, error)));
+    return;
+  }
+  base::ListValue list_val;
+  for (auto &&val : response) {
+    list_val.Append(std::move(val));
+  }
+  std::unique_ptr<content::V8ValueConverter> converter(content::V8ValueConverter::Create());
+  v8::Local<v8::Context> context = arguments->GetHolderCreationContext();
+  arguments->Return(converter->ToV8Value(list_val, context));
+}
+
 void APIBindingJSUtil::SendRequest(
     gin::Arguments* arguments,
     const std::string& name,
     const std::vector<v8::Local<v8::Value>>& request_args,
     v8::Local<v8::Value> options) {
+  SendRequestHelper(arguments, name, request_args, options);
+}
+
+void APIBindingJSUtil::SendRequestHelper(
+    gin::Arguments* arguments,
+    const std::string& name,
+    const std::vector<v8::Local<v8::Value>>& request_args,
+    v8::Local<v8::Value> options,
+    bool sync, bool* success, base::Value::List* response, std::string* error) {
   v8::Isolate* isolate = arguments->isolate();
   v8::HandleScope handle_scope(isolate);
   v8::Local<v8::Context> context = arguments->GetHolderCreationContext();
@@ -111,7 +145,8 @@ void APIBindingJSUtil::SendRequest(
   request_handler_->StartRequest(
       context, name, std::move(parse_result.arguments_list),
       parse_result.async_type, parse_result.callback, custom_callback,
-      binding::ResultModifierFunction());
+      binding::ResultModifierFunction(),
+      sync, success, response, error);
 }

 void APIBindingJSUtil::RegisterEventArgumentMassager(
