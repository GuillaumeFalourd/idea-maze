diff --git a/chrome/browser/extensions/extension_tab_util.cc b/chrome/browser/extensions/extension_tab_util.cc
index 87e14fc382..3166196557 100644
--- a/chrome/browser/extensions/extension_tab_util.cc
+++ b/chrome/browser/extensions/extension_tab_util.cc
@@ -63,6 +63,10 @@
 #include "third_party/abseil-cpp/absl/types/optional.h"
 #include "url/gurl.h"

+#include "components/guest_view/browser/guest_view_manager.h"
+#include "extensions/browser/app_window/app_window_registry.h"
+#include "extensions/browser/app_window/app_window.h"
+
 using content::NavigationEntry;
 using content::WebContents;
 using extensions::mojom::APIPermissionID;
@@ -193,6 +197,7 @@ base::DictionaryValue* ExtensionTabUtil::OpenTab(ExtensionFunction* function,
       return nullptr;
   }

+#if 0
   // Ensure the selected browser is normal.
   if (!browser->is_type_normal() && browser->IsAttemptingToCloseBrowser())
     browser = chrome::FindTabbedBrowser(
@@ -202,7 +207,7 @@ base::DictionaryValue* ExtensionTabUtil::OpenTab(ExtensionFunction* function,
       *error = tabs_constants::kNoCurrentWindowError;
     return nullptr;
   }
-
+#endif
   // TODO(jstritar): Add a constant, chrome.tabs.TAB_ID_ACTIVE, that
   // represents the active tab.
   WebContents* opener = nullptr;
@@ -429,6 +434,7 @@ std::unique_ptr<api::tabs::Tab> ExtensionTabUtil::CreateTabObject(
   tab_object->index = tab_index;
   tab_object->window_id = GetWindowIdOfTab(contents);
   tab_object->status = GetLoadingStatus(contents);
+  tab_object->nwstatus = GetLoadingStatus(contents);
   tab_object->active = tab_strip && tab_index == tab_strip->active_index();
   tab_object->selected = tab_strip && tab_index == tab_strip->active_index();
   tab_object->highlighted = tab_strip && tab_strip->IsTabSelected(tab_index);
@@ -500,6 +506,8 @@ std::unique_ptr<api::tabs::Tab> ExtensionTabUtil::CreateTabObject(

   ScrubTabForExtension(extension, contents, tab_object.get(),
                        scrub_tab_behavior);
+
+  tab_object->main_frame_id = contents->GetPrimaryMainFrame()->GetRoutingID();
   return tab_object;
 }

@@ -721,6 +729,27 @@ bool ExtensionTabUtil::GetTabById(int tab_id,
       include_incognito
           ? profile->GetPrimaryOTRProfile(/*create_if_needed=*/false)
           : nullptr;
+  extensions::AppWindowRegistry* registry = AppWindowRegistry::Get(profile);
+  for (extensions::AppWindow* app_window : registry->app_windows()) {
+    WebContents* target_contents = app_window->web_contents();
+    if (sessions::SessionTabHelper::IdForTab(target_contents).id() == tab_id) {
+      if (contents)
+        *contents = target_contents;
+      return true;
+    }
+  }
+  guest_view::GuestViewManager* manager =
+    guest_view::GuestViewManager::FromBrowserContext(browser_context);
+  if (manager) {
+    const std::map<int, content::WebContents*>& guest_contents = manager->guest_web_contents_by_instance_id();
+    for (std::map<int, content::WebContents*>::const_iterator it = guest_contents.begin(); it != guest_contents.end(); it++) {
+      if (sessions::SessionTabHelper::IdForTab(it->second).id() == tab_id) {
+        if (contents)
+          *contents = it->second;
+        return true;
+      }
+    }
+  }
   for (auto* target_browser : *BrowserList::GetInstance()) {
     if (target_browser->profile() == profile ||
         target_browser->profile() == incognito_profile) {
