diff --git a/extensions/common/file_util.cc b/extensions/common/file_util.cc
index 5eac693ca8..64b6dd92ba 100644
--- a/extensions/common/file_util.cc
+++ b/extensions/common/file_util.cc
@@ -44,6 +44,9 @@
 #include "ui/base/l10n/l10n_util.h"
 #include "url/gurl.h"

+#include "base/command_line.h"
+#include "content/public/common/content_client.h"
+
 using extensions::mojom::ManifestLocation;

 namespace extensions {
@@ -250,7 +253,20 @@ scoped_refptr<Extension> LoadExtension(
 std::unique_ptr<base::DictionaryValue> LoadManifest(
     const base::FilePath& extension_path,
     std::string* error) {
-  return LoadManifest(extension_path, kManifestFilename, error);
+  base::FilePath manifest_path = extension_path.Append(kNWJSManifestFilename);
+
+  if (!base::PathExists(manifest_path))
+    return LoadManifest(extension_path, kManifestFilename, error);
+
+  std::unique_ptr<base::DictionaryValue> manifest =
+    LoadManifest(extension_path, kNWJSManifestFilename, error);
+  content::GetContentClient()->LoadNWAppAsExtension(manifest.get(), extension_path, error);
+
+  base::CommandLine* cmdline = base::CommandLine::ForCurrentProcess();
+  if (cmdline->HasSwitch("mixed-context"))
+    manifest->SetBoolean(manifest_keys::kNWJSMixedContext, true);
+
+  return manifest;
 }

 std::unique_ptr<base::DictionaryValue> LoadManifest(
@@ -297,6 +313,7 @@ bool ValidateExtension(const Extension* extension,
   // Check children of extension root to see if any of them start with _ and is
   // not on the reserved list. We only warn, and do not block the loading of the
   // extension.
+#if 0
   std::string warning;
   if (!CheckForIllegalFilenames(extension->path(), &warning))
     warnings->push_back(InstallWarning(warning));
@@ -328,6 +345,7 @@ bool ValidateExtension(const Extension* extension,
     }
     // Only warn; don't block loading the extension.
   }
+#endif
   return true;
 }

@@ -360,6 +378,7 @@ std::vector<base::FilePath> FindPrivateKeyFiles(

 bool CheckForIllegalFilenames(const base::FilePath& extension_path,
                               std::string* error) {
+#if 0
   // Enumerate all files and directories in the extension root.
   // There is a problem when using pattern "_*" with FileEnumerator, so we have
   // to cheat with find_first_of and match all.
@@ -387,7 +406,7 @@ bool CheckForIllegalFilenames(const base::FilePath& extension_path,
         file.BaseName().AsUTF8Unsafe().c_str());
     return false;
   }
-
+#endif
   return true;
 }

@@ -547,11 +566,11 @@ MessageBundle* LoadMessageBundle(
 }

 base::FilePath GetVerifiedContentsPath(const base::FilePath& extension_path) {
-  return extension_path.Append(kMetadataFolder)
+  return extension_path
       .Append(kVerifiedContentsFilename);
 }
 base::FilePath GetComputedHashesPath(const base::FilePath& extension_path) {
-  return extension_path.Append(kMetadataFolder).Append(kComputedHashesFilename);
+  return extension_path.Append(kComputedHashesFilename);
 }
 base::FilePath GetIndexedRulesetDirectoryRelativePath() {
   return base::FilePath(kMetadataFolder).Append(kIndexedRulesetDirectory);
