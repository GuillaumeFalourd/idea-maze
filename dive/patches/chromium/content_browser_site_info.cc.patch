diff --git a/content/browser/site_info.cc b/content/browser/site_info.cc
index 385e9d6b5b..8a98960b89 100644
--- a/content/browser/site_info.cc
+++ b/content/browser/site_info.cc
@@ -601,9 +601,11 @@ bool SiteInfo::RequiresDedicatedProcess(
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
   DCHECK(isolation_context.browser_or_resource_context());

+#if 0
   // If --site-per-process is enabled, site isolation is enabled everywhere.
   if (SiteIsolationPolicy::UseDedicatedProcessesForAllSites())
     return true;
+#endif

   // If there is a COOP header request to require a dedicated process for this
   // SiteInfo, honor it.  Note that we have already checked other eligibility
@@ -846,7 +848,7 @@ GURL SiteInfo::GetSiteForURLInternal(const IsolationContext& isolation_context,
       return origin.GetURL();
     }

-    site_url = GetSiteForOrigin(origin);
+    site_url = GetSiteForOrigin(origin, real_url);

     // Isolated origins should use the full origin as their site URL. A
     // subdomain of an isolated origin should also use that isolated origin's
@@ -906,10 +908,14 @@ GURL SiteInfo::GetSiteForURLInternal(const IsolationContext& isolation_context,
 }

 // static
-GURL SiteInfo::GetSiteForOrigin(const url::Origin& origin) {
+GURL SiteInfo::GetSiteForOrigin(const url::Origin& origin, const GURL& real_url) {
   // Only keep the scheme and registered domain of |origin|.
   std::string domain = net::registry_controlled_domains::GetDomainAndRegistry(
       origin, net::registry_controlled_domains::INCLUDE_PRIVATE_REGISTRIES);
+  //NWJS: chrome-extension://test.foo.com was changed to foo.com
+  //without this
+  if (!real_url.is_empty() && real_url.SchemeIs("chrome-extension"))
+    domain = origin.host();
   return SchemeAndHostToSite(origin.scheme(),
                              domain.empty() ? origin.host() : domain);
 }
