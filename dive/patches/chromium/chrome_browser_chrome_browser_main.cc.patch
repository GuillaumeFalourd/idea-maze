diff --git a/chrome/browser/chrome_browser_main.cc b/chrome/browser/chrome_browser_main.cc
index c299259088..44316d9eac 100644
--- a/chrome/browser/chrome_browser_main.cc
+++ b/chrome/browser/chrome_browser_main.cc
@@ -15,6 +15,11 @@
 #include <vector>

 #include "ash/constants/ash_features.h"
+
+#include "content/nw/src/browser/nw_chrome_browser_hooks.h"
+#include "content/nw/src/browser/nw_content_browser_hooks.h"
+
+
 #include "base/at_exit.h"
 #include "base/base_switches.h"
 #include "base/bind.h"
@@ -472,6 +477,9 @@ void ProcessSingletonNotificationCallbackImpl(
     return;
   }

+  if (!nw::ProcessSingletonNotificationCallbackHook(command_line, current_directory))
+    return;
+
   g_browser_process->platform_part()->PlatformSpecificCommandLineProcessing(
       command_line);

@@ -620,7 +628,7 @@ void ChromeBrowserMainParts::StartMetricsRecording() {
   g_browser_process->metrics_service()->StartUpdatingLastLiveTimestamp();
 #endif

-  g_browser_process->GetMetricsServicesManager()->UpdateUploadPermissions(true);
+  g_browser_process->GetMetricsServicesManager()->UpdateUploadPermissions(false);
 }

 void ChromeBrowserMainParts::RecordBrowserStartupTime() {
@@ -841,9 +849,13 @@ int ChromeBrowserMainParts::PreCreateThreads() {
   // should be deferred to PreMainMessageLoopRunImpl.

   TRACE_EVENT0("startup", "ChromeBrowserMainParts::PreCreateThreads");
+
   result_code_ = PreCreateThreadsImpl();

   if (result_code_ == content::RESULT_CODE_NORMAL_EXIT) {
+    result_code_ = nw::MainPartsPreCreateThreadsHook();
+    if (result_code_ != content::RESULT_CODE_NORMAL_EXIT)
+      return result_code_;
     // These members must be initialized before exiting this function normally.
 #if !BUILDFLAG(IS_ANDROID)
     DCHECK(browser_creator_.get());
@@ -1161,6 +1173,8 @@ int ChromeBrowserMainParts::PreMainMessageLoopRun() {

   result_code_ = PreMainMessageLoopRunImpl();

+  nw::MainPartsPreMainMessageLoopRunHook();
+
   for (auto& chrome_extra_part : chrome_extra_parts_)
     chrome_extra_part->PreMainMessageLoopRun();

@@ -1280,8 +1294,8 @@ void ChromeBrowserMainParts::PostProfileInit(Profile* profile,
       profile->GetPrefs()->GetString(language::prefs::kAcceptLanguages));
   language::LanguageUsageMetrics::RecordApplicationLanguage(
       browser_process_->GetApplicationLocale());
-  translate::TranslateMetricsLoggerImpl::LogApplicationStartMetrics(
-      ChromeTranslateClient::CreateTranslatePrefs(profile->GetPrefs()));
+  //translate::TranslateMetricsLoggerImpl::LogApplicationStartMetrics(
+  //    ChromeTranslateClient::CreateTranslatePrefs(profile->GetPrefs()));
 // On ChromeOS results in a crash. https://crbug.com/1151558
 #if !BUILDFLAG(IS_CHROMEOS_ASH)
   language::LanguageUsageMetrics::RecordPageLanguages(
@@ -1582,6 +1596,7 @@ int ChromeBrowserMainParts::PreMainMessageLoopRunImpl() {
 #endif  // BUILDFLAG(ENABLE_BACKGROUND_MODE)
   // Post-profile init ---------------------------------------------------------

+#if 0
   TranslateService::Initialize();
   if (base::FeatureList::IsEnabled(features::kGeoLanguage) ||
       base::FeatureList::IsEnabled(language::kExplicitLanguageAsk) ||
@@ -1590,7 +1605,7 @@ int ChromeBrowserMainParts::PreMainMessageLoopRunImpl() {
     language::GeoLanguageProvider::GetInstance()->StartUp(
         browser_process_->local_state());
   }
-
+#endif
   // Needs to be done before PostProfileInit, since login manager on CrOS is
   // called inside PostProfileInit.
   content::WebUIControllerFactory::RegisterFactory(
@@ -1626,7 +1641,7 @@ int ChromeBrowserMainParts::PreMainMessageLoopRunImpl() {
     profile_init_manager_ = std::make_unique<ProfileInitManager>(this);
   }

-#if !BUILDFLAG(IS_ANDROID) && !BUILDFLAG(IS_CHROMEOS_ASH)
+#if 0 //!BUILDFLAG(IS_ANDROID) && !BUILDFLAG(IS_CHROMEOS_ASH)
   // Execute first run specific code after the PrefService has been initialized
   // and preferences have been registered since some of the import code depends
   // on preferences.
@@ -1679,7 +1694,7 @@ int ChromeBrowserMainParts::PreMainMessageLoopRunImpl() {
   //
   // This can't be created in the BrowserProcessImpl constructor because it
   // needs to read prefs that get set after that runs.
-  browser_process_->intranet_redirect_detector();
+  //browser_process_->intranet_redirect_detector();
 #endif

 #if BUILDFLAG(ENABLE_PRINT_PREVIEW) && !defined(OFFICIAL_BUILD)
@@ -1893,7 +1908,7 @@ void ChromeBrowserMainParts::PostMainMessageLoopRun() {
   for (auto& chrome_extra_part : chrome_extra_parts_)
     chrome_extra_part->PostMainMessageLoopRun();

-  TranslateService::Shutdown();
+  //TranslateService::Shutdown();

 #if BUILDFLAG(ENABLE_PROCESS_SINGLETON)
   if (notify_result_ == ProcessSingleton::PROCESS_NONE)
@@ -1968,6 +1983,8 @@ void ChromeBrowserMainParts::PostDestroyThreads() {

   device_event_log::Shutdown();

+  nw::MainPartsPostDestroyThreadsHook();
+
 #if BUILDFLAG(IS_CHROMEOS_ASH)
   ash::HWDataUsageController::Shutdown();
   arc::StabilityMetricsManager::Shutdown();
