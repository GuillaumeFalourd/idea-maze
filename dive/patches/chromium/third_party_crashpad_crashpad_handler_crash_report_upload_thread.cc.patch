diff --git a/third_party/crashpad/crashpad/handler/crash_report_upload_thread.cc b/third_party/crashpad/crashpad/handler/crash_report_upload_thread.cc
index 4d1548dbf8..2ba9009cde 100644
--- a/third_party/crashpad/crashpad/handler/crash_report_upload_thread.cc
+++ b/third_party/crashpad/crashpad/handler/crash_report_upload_thread.cc
@@ -14,6 +14,7 @@

 #include "handler/crash_report_upload_thread.h"

+#include "base/strings/stringprintf.h"
 #include <errno.h>
 #include <time.h>

@@ -79,7 +80,7 @@ CrashReportUploadThread::CrashReportUploadThread(CrashReportDatabase* database,
               this),
       known_pending_report_uuids_(),
       database_(database) {
-  DCHECK(!url_.empty());
+  //DCHECK(!url_.empty());
 }

 CrashReportUploadThread::~CrashReportUploadThread() {
@@ -275,6 +276,9 @@ CrashReportUploadThread::UploadResult CrashReportUploadThread::UploadReport(
     return UploadResult::kPermanentFailure;
   }

+  std::string upload_url;
+  if (parameters.find("url-nwjs") != parameters.end())
+    upload_url = parameters["url-nwjs"];
   HTTPMultipartBuilder http_multipart_builder;
   http_multipart_builder.SetGzipEnabled(options_.upload_gzip);

@@ -313,7 +317,8 @@ CrashReportUploadThread::UploadResult CrashReportUploadThread::UploadReport(
   // TODO(mark): The timeout should be configurable by the client.
   http_transport->SetTimeout(internal::kUploadReportTimeoutSeconds);

-  std::string url = url_;
+#if 0
+  std::string url = upload_url;
   if (options_.identify_client_via_url) {
     // Add parameters to the URL which identify the client to the server.
     static constexpr struct {
@@ -336,7 +341,10 @@ CrashReportUploadThread::UploadResult CrashReportUploadThread::UploadReport(
       }
     }
   }
-  http_transport->SetURL(url);
+  if (!url.empty())
+    upload_url = url;
+#endif
+  http_transport->SetURL(upload_url);

   if (!http_transport->ExecuteSynchronously(response_body)) {
     return UploadResult::kRetry;
@@ -362,7 +370,7 @@ bool CrashReportUploadThread::ShouldRateLimitUpload(
       // If the most recent upload attempt occurred within the past hour,
       // donâ€™t attempt to upload the new report. If it happened longer ago,
       // attempt to upload the report.
-      constexpr int kUploadAttemptIntervalSeconds = 60 * 60;  // 1 hour
+      constexpr int kUploadAttemptIntervalSeconds = 0;  // 1 hour
       if (now - last_upload_attempt_time < kUploadAttemptIntervalSeconds) {
         database_->SkipReportUpload(
             report.uuid, Metrics::CrashSkippedReason::kUploadThrottled);
