diff --git a/extensions/browser/guest_view/web_view/web_view_guest.h b/extensions/browser/guest_view/web_view/web_view_guest.h
index 80f436e86b..4447b77d5b 100644
--- a/extensions/browser/guest_view/web_view/web_view_guest.h
+++ b/extensions/browser/guest_view/web_view/web_view_guest.h
@@ -62,6 +62,8 @@ class WebViewGuest : public guest_view::GuestView<WebViewGuest> {
       int embedder_process_id,
       int web_view_instance_id);

+  void ShowDevTools(bool show, int proc_id, int guest_id);
+  void InspectElement(int x, int y);
   // Get the current zoom.
   double GetZoom() const;

@@ -195,6 +197,7 @@ class WebViewGuest : public guest_view::GuestView<WebViewGuest> {
   void WillDestroy() final;

   // WebContentsDelegate implementation.
+  bool CanLoadFileSubresource(const GURL& url) final;
   void CloseContents(content::WebContents* source) final;
   bool HandleContextMenu(content::RenderFrameHost& render_frame_host,
                          const content::ContextMenuParams& params) final;
@@ -235,7 +238,7 @@ class WebViewGuest : public guest_view::GuestView<WebViewGuest> {
                           int opener_render_frame_id,
                           const std::string& frame_name,
                           const GURL& target_url,
-                          content::WebContents* new_contents) final;
+                          content::WebContents* new_contents, const std::u16string& nw_window_manifest) final;
   void EnterFullscreenModeForTab(
       content::RenderFrameHost* requesting_frame,
       const blink::mojom::FullscreenOptions& options) final;
@@ -324,6 +327,7 @@ class WebViewGuest : public guest_view::GuestView<WebViewGuest> {

   // Stores whether the contents of the guest can be transparent.
   bool allow_transparency_ = false;
+  bool allow_nw_;

   // Handles the JavaScript dialog requests.
   JavaScriptDialogHelper javascript_dialog_helper_;
