diff --git a/chrome/app/main_dll_loader_win.cc b/chrome/app/main_dll_loader_win.cc
index fb9333d9fd..be2c622f91 100644
--- a/chrome/app/main_dll_loader_win.cc
+++ b/chrome/app/main_dll_loader_win.cc
@@ -50,6 +50,8 @@ typedef int (*DLL_MAIN)(HINSTANCE, sandbox::SandboxInterfaceInfo*, int64_t);

 typedef void (*RelaunchChromeBrowserWithNewCommandLineIfNeededFunc)();

+#define BUFSIZE MAX_PATH
+
 void RecordDidRun(const base::FilePath& dll_path) {
   installer::UpdateDidRunState(true);
 }
@@ -87,10 +89,17 @@ base::FilePath GetModulePath(base::WStringPiece module_name) {
 // directory. Returns a handle to the loaded module on success, or nullptr on
 // failure.
 HMODULE LoadModuleWithDirectory(const base::FilePath& module) {
+  bool restore_directory = false;
+  TCHAR Buffer[BUFSIZE];
+  if (::GetCurrentDirectoryW(BUFSIZE, Buffer)) {
+    restore_directory = true;
+  }
   ::SetCurrentDirectoryW(module.DirName().value().c_str());
   base::PreReadFile(module, /*is_executable=*/true);
   HMODULE handle = ::LoadLibraryExW(module.value().c_str(), nullptr,
                                     LOAD_WITH_ALTERED_SEARCH_PATH);
+  if (restore_directory)
+    ::SetCurrentDirectory(Buffer);
   return handle;
 }

@@ -105,7 +114,7 @@ HMODULE Load(base::FilePath* module) {
   }
   HMODULE dll = LoadModuleWithDirectory(*module);
   if (!dll)
-    PLOG(ERROR) << "Failed to load Chrome DLL from " << module->value();
+    PLOG(ERROR) << "Failed to load NW DLL from " << module->value();
   return dll;
 }

diff --git a/chrome/app/nibs/MainMenu.xib b/chrome/app/nibs/MainMenu.xib
new file mode 100644
index 0000000000..7de16d66f5
