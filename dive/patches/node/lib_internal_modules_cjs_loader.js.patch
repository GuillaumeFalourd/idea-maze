diff --git a/lib/internal/modules/cjs/loader.js b/lib/internal/modules/cjs/loader.js
index 67133b49..7a8c33e0 100644
--- a/lib/internal/modules/cjs/loader.js
+++ b/lib/internal/modules/cjs/loader.js
@@ -154,6 +154,19 @@ let requireDepth = 0;
 let statCache = null;
 let isPreloading = false;
 
+function extensionUrl(str) {
+  if (typeof str !== 'string') {
+    throw new Error('Expected a string');
+  }
+
+  var pathName = path.resolve(str).replace(/\\/g, '/');
+
+  var relative = path.relative(global.__dirname, pathName);
+
+  var ret = encodeURI('chrome-extension://' + global.__nwjs_ext_id + '/' + relative);
+  return ret;
+};
+
 function stat(filename) {
   filename = path.toNamespacedPath(filename);
   if (statCache !== null) {
@@ -318,6 +331,12 @@ const packageJsonCache = new SafeMap();
 
 function readPackage(requestPath) {
   const jsonPath = path.resolve(requestPath, 'package.json');
+  if (global.__nwjs_cv) {
+    var url = extensionUrl(jsonPath);
+    var request = new global.XMLHttpRequest();
+    request.open('GET', url, false);
+    request.send(null);
+  }
 
   const existing = packageJsonCache.get(jsonPath);
   if (existing !== undefined) return existing;
@@ -856,6 +875,11 @@ Module._load = function(request, parent, isMain) {
   if (isMain) {
     process.mainModule = module;
     module.id = '.';
+    if (process.__nwjs) {
+      // require() in DOM needs this module as parent
+      module._compile('global.module = module;\n' +
+                      'global.require = require;\n', 'nw-emulate-node');
+    }
   }
 
   Module._cache[filename] = module;
@@ -1156,6 +1180,12 @@ Module.prototype._compile = function(content, filename) {
 
 // Native extension for .js
 Module._extensions['.js'] = function(module, filename) {
+  if (global.__nwjs_cv) {
+    var url = extensionUrl(filename);
+    var request = new global.XMLHttpRequest();
+    request.open('GET', url, false);
+    request.send(null);
+  }
   // If already analyzed the source, then it will be cached.
   const cached = cjsParseCache.get(module);
   let content;
@@ -1213,6 +1243,13 @@ Module._extensions['.json'] = function(module, filename) {
     policy.manifest.assertIntegrity(moduleURL, content);
   }
 
+  if (global.__nwjs_cv) {
+    var url = extensionUrl(filename);
+    var request = new global.XMLHttpRequest();
+    request.open('GET', url, false);
+    request.send(null);
+  }
+
   try {
     setOwnProperty(module, 'exports', JSONParse(stripBOM(content)));
   } catch (err) {
@@ -1230,6 +1267,14 @@ Module._extensions['.node'] = function(module, filename) {
     policy.manifest.assertIntegrity(moduleURL, content);
   }
   // Be aware this doesn't use `content`
+
+  if (global.__nwjs_cv) {
+    var url = extensionUrl(filename);
+    var request = new global.XMLHttpRequest();
+    request.open('GET', url, false);
+    request.send(null);
+  }
+
   return process.dlopen(module, path.toNamespacedPath(filename));
 };
 
@@ -1290,6 +1335,7 @@ Module._initPaths = function() {
     ArrayPrototypeUnshift(paths, path.resolve(homeDir, '.node_libraries'));
     ArrayPrototypeUnshift(paths, path.resolve(homeDir, '.node_modules'));
   }
+  paths.unshift(process.cwd());
 
   if (nodePath) {
     ArrayPrototypeUnshiftApply(paths, ArrayPrototypeFilter(
